{"version":3,"file":"static/js/151.2994471b.chunk.js","mappings":"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","sources":["modules/color/validation/colorsSchema.js","modules/color/containers/ColorFormContainer.jsx","modules/color/hooks/useColorLogic.js","utility/formik/formikConfig.js","utility/formik/formikHelper.js","utility/helpers/routeHelper.js","utility/validation/customSchema.js","utility/helpers/validationRuleHelper.js"],"sourcesContent":["import generateSchema, {stringRules} from \"../../../utility/helpers/validationRuleHelper\";\n\nconst colorsSchema = generateSchema({\n   name: stringRules(),\n   code: stringRules()\n})\n\n\nexport default colorsSchema;","import {useParams} from \"react-router-dom\";\nimport {lazy, useEffect} from \"react\";\nimport useColorLogic from \"../hooks/useColorLogic\";\nimport {buildFormikParams, formikInstance} from \"../../../utility/formik/formikHelper\";\nimport colorsSchema from \"../validation/colorsSchema\";\n\nconst ColorForm = lazy(() => import('../views/ColorForm'))\nexport const emptyColorForm = {\n    name: '',\n    code: '#eeeeee'\n}\n\nconst ColorFormContainer = () => {\n    const {getOneColorLogic, updateColorLogic, storeColorLogic, oneColor} = useColorLogic();\n    const {id} = useParams();\n    const inUpdate = id !== undefined;\n\n    const formik = formikInstance({\n        initialValues: !inUpdate ? emptyColorForm : {\n            name: oneColor.name,\n            code: oneColor.code\n        },\n        validationSchema: colorsSchema,\n        onSubmit: (values) => {\n            if (inUpdate) {\n                updateColorLogic(values, id, buildFormikParams(formik))\n            } else {\n                storeColorLogic(values, buildFormikParams(formik))\n            }\n        }});\n\n    useEffect(() => {\n        if (inUpdate) {\n            getOneColorLogic(id)\n        }\n    }, []);\n\n    const {\n        handleChange,\n        handleSubmit,\n        handleBlur,\n        values,\n        errors,\n        isValid,\n        isSubmitting,\n        setFieldValue,\n        resetForm\n    } = formik\n\n    return <ColorForm\n        inUpdate={inUpdate}\n        formikObject={{handleBlur, handleChange, handleSubmit, values, errors, isSubmitting, isValid, setFieldValue, resetForm}}\n    />\n}\n\nexport default ColorFormContainer;","import {useDispatch, useSelector} from \"react-redux\";\nimport {getUniqueParams} from \"../../../utility/helpers/routeHelper\";\nimport axiosInstance from \"../../../api/axiosInstance\";\nimport {\n    setAllColorsAction,\n    setAllColorsLoadingAction,\n    setAllColorsMetaAction, setOneColorAction,\n    setOneColorLoadingAction\n} from \"../redux\";\nimport {formikErrorHandler} from \"../../../utility/formik/formikHelper\";\nimport {useNavigate} from \"react-router-dom\";\nimport colorRoutes from \"../constants/routes\";\n\nconst useColorLogic = () => {\n    const dispatch = useDispatch()\n    const navigate = useNavigate()\n    const selector = useSelector(state => state.colorsReducer),\n        all = selector.all.data,\n        meta = selector.all.meta,\n        oneColor = selector.show.data;\n\n    const getAllColorsLogic = (params = undefined) => {\n        params = params === undefined ? getUniqueParams() : params;\n        dispatch(setAllColorsLoadingAction(true))\n\n        axiosInstance.get('/admin/colors', {params}).then((response) => {\n            dispatch(setAllColorsAction(response.data.data))\n            dispatch(setAllColorsMetaAction(response.data.meta));\n        }).finally(() => dispatch(setAllColorsLoadingAction(false)))\n    }\n\n    const getOneColorLogic = (id) => {\n        dispatch(setOneColorLoadingAction(true))\n\n        axiosInstance.get(`/admin/colors/${id}`).then((response) => {\n            dispatch(setOneColorAction(response.data.data));\n        }).finally(() => dispatch(setOneColorLoadingAction(false)))\n    }\n\n    const storeColorLogic = (values, formikObject) => {\n        const {setSubmitting} = formikObject;\n\n        setSubmitting(true)\n\n        axiosInstance.post('/admin/colors', values)\n            .then(() => navigate(colorRoutes.TABLE))\n            .catch((error) => formikErrorHandler(error.response.data, formikObject))\n            .finally(() => setSubmitting(false))\n    }\n\n    const updateColorLogic = (values, id, formikObject) => {\n        const {setSubmitting} = formikObject;\n\n        setSubmitting(true)\n\n        axiosInstance.put(`/admin/colors/${id}`, values)\n            .then(() => navigate(colorRoutes.TABLE))\n            .catch((error) => formikErrorHandler(error.response.data, formikObject))\n            .finally(() => setSubmitting(false))\n    }\n\n    const deleteColorLogic = (id) => {\n        axiosInstance.delete(`admin/colors/${id}`).then(() => getAllColorsLogic())\n    }\n\n    return {\n        all,\n        meta,\n        oneColor,\n        getAllColorsLogic,\n        storeColorLogic,\n        updateColorLogic,\n        deleteColorLogic,\n        getOneColorLogic\n    }\n}\n\nexport default useColorLogic;","import PropTypes from \"prop-types\";\n\nconst FormikConfig = ({initialValues, validationSchema, onSubmit, overrideConfig}) => {\n    return {\n        initialValues,\n        validateOnBlur: true,\n        validateOnChange: false,\n        validateOnMount: false,\n        enableReinitialize: true,\n        validationSchema,\n        onSubmit,\n        ...overrideConfig\n    }\n}\n\nFormikConfig.propTypes = {\n    initialValues: PropTypes.object,\n    validationSchema: PropTypes.object.isRequired,\n    onSubmit: PropTypes.func.isRequired\n}\n\nexport default FormikConfig","import {useFormik} from \"formik\";\nimport FormikConfig from \"./formikConfig\";\nimport PropTypes from \"prop-types\";\nimport {HttpResponse} from \"../../constants/api\";\nimport toastFactory from \"../factories/toastFactory\";\nimport {isObjEmpty} from \"../Utils\";\n\nexport const formikInstance = (props) => {\n    const formikConfig = FormikConfig(props)\n\n    return useFormik(formikConfig)\n}\n\nexport const formikErrorHandler = (response, formikObject) => {\n\n    if (response.code !== HttpResponse.VALIDATION_ERRORS) {\n        return;\n    }\n\n    console.log('iam here');\n\n    const {initialValues, setErrors} = formikObject;\n\n    const errorKeys = Object.keys(initialValues);\n\n    const tmpErrors = {}\n\n    errorKeys.forEach((errorKey) => {\n        if (response.data[errorKey] !== undefined) {\n            tmpErrors[errorKey] = response.data[errorKey]\n        }\n    })\n\n    if (!isObjEmpty(tmpErrors)) {\n        setErrors(tmpErrors)\n    }\n\n    const responseErrorKeys = Object.keys(response.data);\n\n    for (let i = 0; i < responseErrorKeys.length; i++) {\n        if (!errorKeys.includes(responseErrorKeys[i])) {\n            toastFactory.error(response.data[responseErrorKeys[i]])\n            break;\n        }\n    }\n}\n\nexport const buildFormikParams = (formik) => {\n    return {\n        setErrors: formik.setErrors,\n        initialValues: formik.initialValues,\n        setSubmitting: formik.setSubmitting\n    }\n}\n\n\nformikInstance.propTypes = {\n    initialValues: PropTypes.object,\n    validationSchema: PropTypes.object.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    overrideConfig: PropTypes.object\n}","export const parseRoute = (url = '', bindings = {}) => {\n    let routePath = url;\n    for (const [key, value] of Object.entries(bindings)) {\n        routePath = routePath.replace(`:${key}`, value);\n    }\n\n    return routePath;\n}\n\nexport function getUniqueParams() {\n    const urlParams = new URLSearchParams(window.location.search);\n\n    const uniqueParams = new Set();\n    \n    urlParams.forEach((value, key) => {\n        uniqueParams.add(key);\n    });\n    \n    const uniqueParamsArray = Array.from(uniqueParams);\n\n    const uniqueUrlParams = new URLSearchParams();\n\n    uniqueParamsArray.forEach((item) => uniqueUrlParams.append(item, urlParams.get(item)));\n\n    return uniqueUrlParams;\n}\n\nexport const updateParams = (params) => {\n    const newUrl = `${window.location.pathname}?${params}`;\n    window.history.pushState({ path: newUrl }, '', newUrl);\n}\n\nexport const goBack = () => {\n    history.back()\n}","const isFile = (value) => {\n    return (value instanceof File)\n}\n\nconst fileSchema = (value, createError) => {\n    if (!isFile(value)) {\n        return createError('field must be a valid file')\n    }\n\n    return true;\n}\n\nconst imageSchema = (value, createError) => {\n    console.log(value, value.size, value.type)\n    const type = value?.type?.split('/')[0] || null;\n\n    if (!isFile(value) || type !== 'image') {\n        return createError({message: 'field must be an image'})\n    }\n\n    return true;\n}\n\nconst customSchema = {\n    file: fileSchema,\n    image: imageSchema\n}\n\nexport default customSchema","import * as Yup from 'yup'\nimport customSchema from \"../validation/customSchema\";\n\nexport const replaceDefaultRules = (defaultRules, newRules) => {\n    if (newRules) {\n        Object.keys(newRules).forEach((key) => {\n            if (newRules[key]) {\n                delete defaultRules[key]\n            } else {\n                defaultRules[key] = newRules[key]\n            }\n        })\n    }\n\n\n    return Object.values(defaultRules)?.filter((item) => !!item)\n}\n\nexport const emailRules = (newRules) => {\n    const defaultRules = {\n        string: 'string',\n        required: 'required',\n        email: 'email',\n        trim: 'trim'\n    }\n\n    return replaceDefaultRules(defaultRules, newRules)\n}\n\nexport const stringRules = (newRules) => {\n    const defaultRules = {\n        string: 'string',\n        required: 'required',\n        max: 'max:255',\n        trim: 'trim'\n    }\n\n    return replaceDefaultRules(defaultRules, newRules)\n}\n\nexport const longTextRules = (newRules) => {\n    return stringRules({...{max: null}, ...newRules})\n}\n\nexport const imageRules = (newRules) => {\n    const defaultRules = {\n        required: 'required',\n        image: 'image'\n    }\n\n    return replaceDefaultRules(defaultRules, newRules)\n}\n\nexport const passwordRules = (newRules) => {\n    const defaultRules = {\n        string: 'string',\n        required: 'required',\n        min: 'min:8',\n        trim: 'trim'\n    }\n\n    return replaceDefaultRules(defaultRules, newRules)\n}\n\nexport const integerRules = (newRules) => {\n    const defaultRules = {\n        number: 'number',\n        required: 'required',\n        min: 'min:1'\n    }\n\n    return replaceDefaultRules(defaultRules, newRules)\n}\n\nexport const arrayRules = (newRules) => {\n    const defaultRules = {\n        array: 'array',\n        required: 'required'\n    }\n\n    return replaceDefaultRules(defaultRules, newRules)\n}\n\nconst generateSchema = (allRulesObject) => {\n    let schema = Yup.object().shape({});\n\n    Object.entries(allRulesObject).forEach(([fieldName, fieldRules]) => {\n        if (fieldRules) {\n            let fieldSchema = Yup\n\n            fieldRules.forEach((rule) => {\n                const [ruleName, ...params] = rule.split(':');\n\n                if (customSchema[ruleName] !== undefined) {\n                    fieldSchema = fieldSchema.test(\n                        ruleName,\n                        'error',\n                        (value, {createError}) => customSchema[ruleName](value, createError, ...params));\n                } else {\n                    fieldSchema = fieldSchema[ruleName](...params);\n                }\n            });\n\n            schema = schema.shape({[fieldName]: fieldSchema});\n        }\n    });\n\n    return schema;\n};\n\n\nexport const yupInstance = Yup;\nexport default generateSchema"],"names":["generateSchema","name","stringRules","code","ColorForm","lazy","emptyColorForm","ColorFormContainer","getOneColorLogic","updateColorLogic","storeColorLogic","oneColor","useColorLogic","id","useParams","inUpdate","undefined","formik","formikInstance","initialValues","validationSchema","colorsSchema","onSubmit","values","buildFormikParams","useEffect","handleChange","handleSubmit","handleBlur","errors","isValid","isSubmitting","setFieldValue","resetForm","_jsx","formikObject","dispatch","useDispatch","navigate","useNavigate","selector","useSelector","state","colorsReducer","all","data","meta","show","getAllColorsLogic","params","arguments","length","getUniqueParams","setAllColorsLoadingAction","axiosInstance","get","then","response","setAllColorsAction","setAllColorsMetaAction","finally","setSubmitting","post","colorRoutes","TABLE","catch","error","formikErrorHandler","put","concat","deleteColorLogic","delete","setOneColorLoadingAction","setOneColorAction","FormikConfig","_ref","overrideConfig","validateOnBlur","validateOnChange","validateOnMount","enableReinitialize","propTypes","PropTypes","isRequired","props","formikConfig","useFormik","HttpResponse","VALIDATION_ERRORS","console","log","setErrors","errorKeys","Object","keys","tmpErrors","forEach","errorKey","isObjEmpty","responseErrorKeys","i","includes","toastFactory","parseRoute","bindings","routePath","key","value","entries","replace","urlParams","URLSearchParams","window","location","search","uniqueParams","Set","add","uniqueParamsArray","Array","from","uniqueUrlParams","item","append","updateParams","newUrl","pathname","history","pushState","path","goBack","back","isFile","File","file","fileSchema","createError","image","imageSchema","_value$type","size","type","split","message","replaceDefaultRules","defaultRules","newRules","_Object$values","filter","emailRules","string","required","email","trim","max","longTextRules","passwordRules","min","integerRules","number","arrayRules","array","allRulesObject","schema","Yup","shape","fieldName","fieldRules","fieldSchema","rule","ruleName","customSchema","test","_ref2"],"sourceRoot":""}