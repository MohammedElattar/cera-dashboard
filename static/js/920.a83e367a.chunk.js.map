{"version":3,"file":"static/js/920.a83e367a.chunk.js","mappings":"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","sources":["utility/helpers/routeHelper.js","modules/contactUs/hooks/useContactUsLogic.js","utility/helpers/paginationHelper.js","utility/hooks/usePagination.js","utility/helpers/searchHelper.js","components/table/CustomTable.jsx","components/table/dropDownItems/DeleteDropDownItem.jsx","components/table/dropDownItems/TableActions.jsx","modules/contactUs/views/columns.js","modules/contactUs/views/ContactUsTable.jsx","utility/helpers/toastHelper.js","utility/hooks/useSearch.js","modules/contactUs/containers/ContactUsContainer.jsx"],"sourcesContent":["export const parseRoute = (url = '', bindings = {}) => {\n    let routePath = url;\n    for (const [key, value] of Object.entries(bindings)) {\n        routePath = routePath.replace(`:${key}`, value);\n    }\n\n    return routePath;\n}\n\nexport function getUniqueParams() {\n    const urlParams = new URLSearchParams(window.location.search);\n\n    const uniqueParams = new Set();\n    \n    urlParams.forEach((value, key) => {\n        uniqueParams.add(key);\n    });\n    \n    const uniqueParamsArray = Array.from(uniqueParams);\n\n    const uniqueUrlParams = new URLSearchParams();\n\n    uniqueParamsArray.forEach((item) => uniqueUrlParams.append(item, urlParams.get(item)));\n\n    return uniqueUrlParams;\n}\n\nexport const updateParams = (params) => {\n    const newUrl = `${window.location.pathname}?${params}`;\n    window.history.pushState({ path: newUrl }, '', newUrl);\n}","import {useDispatch, useSelector} from \"react-redux\";\nimport axiosInstance from \"../../../api/axiosInstance\";\nimport {\n    deleteContactUsLoadingAction,\n    setAllContactUsAction,\n    setAllContactUsLoadingAction,\n    setAllContactUsMetaAction\n} from \"../redux\";\nimport {getUniqueParams} from \"../../../utility/helpers/routeHelper\";\n\nconst useContactUsLogic = () => {\n    const dispatch = useDispatch(),\n        selector = useSelector((state) => state.contactUsReducer),\n        all = selector.all.data,\n        allLoading = selector.all.loading,\n        meta = selector.all.meta;\n\n    const getContactUsTableLogic = (params = undefined) => {\n        params = params === undefined ? getUniqueParams() : params;\n        dispatch(setAllContactUsLoadingAction(true))\n\n        axiosInstance.get('/admin/contact_us', {params}).then((response) => {\n\n            dispatch(setAllContactUsAction(response.data.data));\n            dispatch(setAllContactUsMetaAction(response.data.meta))\n       }).finally(() => dispatch(setAllContactUsLoadingAction(false)))\n    }\n\n    const deleteContactUsLogic = (id) => {\n        dispatch(deleteContactUsLoadingAction(true))\n        axiosInstance.delete(`/admin/contact_us/${id}`).then(() => {\n            getContactUsTableLogic()\n        }).finally(() => dispatch(deleteContactUsLoadingAction(false)))\n    }\n\n    return {\n        getContactUsTableLogic,\n        deleteContactUsLogic,\n        all,\n        allLoading,\n        meta\n    }\n}\n\nexport default useContactUsLogic;","import { lazy } from \"react\"\n\nconst Pagination = lazy(() => import('../../components/table/PaginationComponent'))\nimport {getUniqueParams, updateParams} from \"./routeHelper\";\n\nexport const paginationComponent = (args) => {\n    return <Pagination {...args} />\n}\n\nexport function getValidPageNumber(page) {\n    page = Number.parseInt(page);\n    if (!Number.isInteger(page) || page < 1) {\n        page = 1;\n    }\n    return page;\n}\n\nexport function getValidPerPage(perPage) {\n    perPage = Number.parseInt(perPage);\n    if (!Number.isInteger(perPage) || (perPage < 5 || perPage > 100)) {\n        perPage = 5;\n    }\n    return perPage;\n}\n\nexport function getCurrentPage() {\n    const { page } = getUniqueParams(); // Assuming you have defined a 'page' parameter in your route\n    return getValidPageNumber(page);\n}\n\nexport function getPerPage() {\n    const { perPage } = getUniqueParams(); // Assuming you have defined a 'perPage' parameter in your route\n    return getValidPerPage(perPage);\n}\n\nexport function getNextPageNumber() {\n    let currentPage = getCurrentPage();\n    return ++currentPage;\n}\n\nexport function getPreviousPageNumber() {\n    let currentPage = getCurrentPage();\n    if (currentPage <= 1) {\n        return 1;\n    }\n    return --currentPage;\n}\n\nexport function updatePaginationParams(page, perPage) {\n    const updatedParams = new URLSearchParams(window.location.search);\n\n    updatedParams.set('page', getValidPageNumber(page).toString());\n    updatedParams.set('per_page', getValidPerPage(perPage).toString());\n\n    updateParams(updatedParams.toString())\n}\n\n\n\nexport function generatePaginationParams(page, perPage) {\n    page = getCurrentPage()\n    perPage = getPerPage()\n\n    return {page, per_page: perPage}\n}","// paginationLogic.js\nimport { useEffect, useState } from \"react\";\nimport {getValidPageNumber, getValidPerPage, updatePaginationParams} from \"../helpers/paginationHelper\";\n\nconst usePagination = (getAllDataLogic, meta) => {\n    const [currentPerPage, setCurrentPerPage] = useState(getValidPerPage());\n    const [currentPage, setCurrentPageState] = useState(getValidPageNumber());\n\n    useEffect(() => {\n        getAllDataLogic();\n    }, [currentPage, currentPerPage]);\n\n    useEffect(() => {\n        setCurrentPerPage(meta.perPage);\n        setCurrentPageState(meta.currentPage);\n    }, [meta]);\n\n    const handlePageChange = (page) => {\n        setCurrentPageState(page);\n        updatePaginationParams(page, currentPerPage);\n    };\n\n    const handlePerPageChange = (perPage) => {\n        setCurrentPerPage(perPage);\n        updatePaginationParams(currentPage, perPage);\n        setCurrentPerPage(perPage);\n    };\n\n    return {\n        currentPerPage,\n        currentPage,\n        handlePageChange,\n        handlePerPageChange,\n        setCurrentPageState\n    };\n};\n\nexport default usePagination;\n","import {getUniqueParams, updateParams} from \"./routeHelper\";\n\nexport const pushSearchParam = (value) => {\n    const params = getUniqueParams()\n    params.set('handle', value)\n    updateParams(params.toString())\n}\n\nexport const getSearchParam = () => {\n    const params = getUniqueParams();\n\n    return params.get('handle') || '';\n}","import React, {Fragment, useState} from \"react\";\nimport {Button, Card, CardHeader, CardTitle, Col, Input, InputGroup, Label, Row} from \"reactstrap\";\nimport '../../@core/scss/react/libs/tables/react-dataTable-component.scss'\nimport {ChevronDown, Search} from \"react-feather\";\nimport DataTable from 'react-data-table-component';\nimport {paginationComponent} from \"../../utility/helpers/paginationHelper\";\nimport {getSearchParam} from \"../../utility/helpers/searchHelper\";\n\nconst CustomTable = ({\n                         title,\n                         columns,\n                         data,\n                         paginationObject,\n                         pagination = false,\n                         searchable = true,\n                         handleSearch,\n                         entriesPerPageOptions = [5, 10, 25, 50, 75, 100]\n                     }) => {\n    const [searchValue, setSearchValue] = useState(getSearchParam());\n\n    return (\n        <Fragment>\n            <Row>\n                <Col sm='12'>\n                    <Fragment>\n                        <Card>\n                            <CardHeader className='border-bottom'>\n                                <CardTitle tag='h4'>{title}</CardTitle>\n                            </CardHeader>\n                            <Row className='mx-0 mt-1 mb-50'>\n                                {pagination && (\n                                    <Col sm='6'>\n                                        <div className='d-flex align-items-center'>\n                                            <Label for='entries-select'>Show</Label>\n                                            <Input\n                                                className='dataTable-select'\n                                                type='select'\n                                                id='entries-select'\n                                                value={paginationObject.currentPerPage}\n                                                onChange={(e) => paginationObject.handlePerPageChange(e.target.value)}\n                                            >\n                                                {entriesPerPageOptions.map(option => (\n                                                    <option key={option} value={option}>{option}</option>\n                                                ))}\n                                            </Input>\n                                            <Label for='entries-select'>entries</Label>\n                                        </div>\n                                    </Col>\n                                )}\n                                {searchable && (\n                                    <Col className='d-flex align-items-center justify-content-sm-end mt-sm-0 mt-1'\n                                         sm='6'>\n                                        <InputGroup size=\"sm\" style={{ width: 'auto' }}>\n                                            <span className=\"input-group-text\">\n                                                <Search onClick={() => handleSearch(searchValue)}/>\n                                            </span>\n                                            <Input\n                                                className='dataTable-filter'\n                                                type='text'\n                                                id='search-input'\n                                                value={searchValue}\n                                                onChange={(event) => {\n                                                    const value = event.target.value;\n\n                                                    if (!value && !!searchValue) {\n                                                        handleSearch('')\n                                                    }\n\n                                                    setSearchValue(value);\n                                                }}\n                                                placeholder=\"Search...\"\n                                            />\n                                        </InputGroup>\n                                    </Col>\n                                )}\n                            </Row>\n                            <div className='react-dataTable'>\n                                <DataTable\n                                    bordered\n                                    noHeader\n                                    pagination={pagination}\n                                    paginationComponent={() => paginationComponent(paginationObject)}\n                                    paginationServer\n                                    className='react-dataTable'\n                                    columns={columns}\n                                    sortIcon={<ChevronDown size={10}/>}\n                                    data={data}\n                                />\n                            </div>\n                        </Card>\n                    </Fragment>\n                </Col>\n            </Row>\n        </Fragment>\n    );\n}\n\nexport default CustomTable;\n","import { Trash } from \"react-feather\";\nimport { Button } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport MySwal from \"sweetalert2\";\n\nconst DeleteDropDownItem = ({isLoading, handleDelete}) => {\n    const handleConfirmText = () => {\n        return MySwal.fire({\n            title: 'Are you sure?',\n            text: \"You won't be able to revert this!\",\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonText: 'Yes, delete it!',\n            customClass: {\n                confirmButton: 'btn btn-primary',\n                cancelButton: 'btn btn-outline-danger ms-1'\n            },\n            buttonsStyling: false\n        }).then(function (result) {\n            if (result.isConfirmed === true) {\n                handleDelete()\n            }\n\n            if (isLoading === false) {\n                MySwal.fire({\n                    icon: 'success',\n                    title: 'Deleted!',\n                    text: 'Your file has been deleted.',\n                    customClass: {\n                        confirmButton: 'btn btn-success'\n                    }\n                })\n            }\n        })\n    }\n    return (\n        <>\n            <Button\n                onClick={handleConfirmText}\n                size='sm'\n                color='transparent'\n                className='btn btn-icon'\n            >\n                <Trash className='font-medium-2' />\n            </Button>\n        </>\n    )\n}\n\nDeleteDropDownItem.propTypes = {\n    handleDelete: PropTypes.func.isRequired\n}\n\nexport default DeleteDropDownItem;","const TableActions = ({actions}) => {\n    return <div className='d-flex align-items-center permissions-actions'>\n          {actions}\n        </div>\n}\n\nexport default TableActions;","import DeleteDropDownItem from \"../../../components/table/dropDownItems/DeleteDropDownItem\";\nimport TableActions from \"../../../components/table/dropDownItems/TableActions\";\n\nconst generateActions = (row, props) => {\n    const {handleDelete} = props;\n    const actions = [<DeleteDropDownItem key={1} handleDelete={() => handleDelete(row.id)}/>]\n\n    return <TableActions row={row} actions={actions}/>\n}\n\nconst getColumns = (props) => {\n    return [\n        {\n            sortable: true,\n            name: 'Name',\n            minwidth: '250px',\n            selector: row => row.name\n        },\n        {\n            sortable: true,\n            name: 'Email',\n            minwidth: '250px',\n            selector: row => row.email\n        },\n        {\n            sortable: true,\n            name: 'Phone',\n            minwidth: '250px',\n            selector: row => row.phone\n        },\n        {\n            sortable: true,\n            name: 'Message',\n            minwidth: '250px',\n            selector: row => row.message\n        },\n        {\n            name: 'Actions',\n            minwidth: '100px',\n            cell: row => generateActions(row, props)\n        }\n    ];\n}\n\nexport default getColumns;","import {useSelector} from \"react-redux\";\nimport {toastLoader} from \"../../../utility/helpers/toastHelper\";\nimport CustomTable from \"../../../components/table/CustomTable\";\nimport getColumns from \"./columns\";\n\nconst ContactUsTable = ({data, paginationObject, handleDelete, handleSearch}) => {\n    const tableLoading = useSelector(state => state.contactUsReducer.all.loading)\n    const deleteLoading = useSelector(state => state.contactUsReducer.deleteLoading);\n\n    toastLoader(tableLoading || deleteLoading)\n\n    return <CustomTable\n        handleSearch={handleSearch}\n        columns={getColumns({handleDelete})}\n        data={data.all}\n        pagination={true}\n        paginationObject={paginationObject}\n        handlePageChange\n        title='Contact Us'\n    />\n}\n\nexport default ContactUsTable;","import {useEffect} from \"react\";\nimport toastFactory from \"../factories/toastFactory\";\n\nexport const toastLoader = (isLoading = false) => {\n    useEffect(() => {\n        if (isLoading) {\n            toastFactory.dismiss()\n            toastFactory.loading('Loading')\n        } else {\n            toastFactory.dismiss()\n        }\n    }, [isLoading])\n}","import {pushSearchParam} from \"../helpers/searchHelper\";\n\nconst useSearch = (getAllDataLogic) => {\n    const handleSearch = (value) => {\n        pushSearchParam(value)\n        getAllDataLogic()\n    }\n\n    return {handleSearch}\n}\n\nexport default useSearch;","import useContactUsLogic from \"../hooks/useContactUsLogic\";\nimport usePagination from \"../../../utility/hooks/usePagination\";\nimport ContactUsTable from \"../views/ContactUsTable\";\nimport useSearch from \"../../../utility/hooks/useSearch\";\n\nconst ContactUsContainer = () => {\n    const {all, meta, getContactUsTableLogic, deleteContactUsLogic} = useContactUsLogic()\n    const {handleSearch} = useSearch(getContactUsTableLogic);\n    const {\n        currentPerPage,\n        currentPage,\n        setCurrentPageState,\n        handlePageChange,\n        handlePerPageChange\n    } = usePagination(getContactUsTableLogic, meta);\n\n    return <ContactUsTable\n        data={{all}}\n        handleDelete={deleteContactUsLogic}\n        handleSearch={handleSearch}\n        paginationObject={{\n            meta,\n            currentPerPage,\n            currentPage,\n            setCurrentPageState,\n            handlePageChange,\n            handlePerPageChange\n        }}\n    />\n}\n\nexport default ContactUsContainer;"],"names":["getUniqueParams","urlParams","URLSearchParams","window","location","search","uniqueParams","Set","forEach","value","key","add","uniqueParamsArray","Array","from","uniqueUrlParams","item","append","get","updateParams","params","newUrl","concat","pathname","history","pushState","path","useContactUsLogic","dispatch","useDispatch","selector","useSelector","state","contactUsReducer","all","data","allLoading","loading","meta","getContactUsTableLogic","arguments","length","undefined","setAllContactUsLoadingAction","axiosInstance","then","response","setAllContactUsAction","setAllContactUsMetaAction","finally","deleteContactUsLogic","id","deleteContactUsLoadingAction","delete","Pagination","lazy","getValidPageNumber","page","Number","parseInt","isInteger","getValidPerPage","perPage","updatePaginationParams","updatedParams","set","toString","usePagination","getAllDataLogic","currentPerPage","setCurrentPerPage","useState","currentPage","setCurrentPageState","useEffect","handlePageChange","handlePerPageChange","_ref","title","columns","paginationObject","pagination","searchable","handleSearch","entriesPerPageOptions","searchValue","setSearchValue","_jsx","Fragment","children","Row","Col","sm","_jsxs","Card","CardHeader","className","CardTitle","tag","Label","for","Input","type","onChange","e","target","map","option","InputGroup","size","style","width","Search","onClick","event","placeholder","DataTable","bordered","noHeader","paginationComponent","args","paginationServer","sortIcon","ChevronDown","isLoading","handleDelete","_Fragment","Button","handleConfirmText","MySwal","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","result","isConfirmed","color","Trash","actions","props","sortable","name","minwidth","row","email","phone","message","cell","generateActions","DeleteDropDownItem","TableActions","tableLoading","deleteLoading","toastFactory","dismiss","toastLoader","CustomTable","getColumns","pushSearchParam","ContactUsContainer","useSearch","ContactUsTable"],"sourceRoot":""}