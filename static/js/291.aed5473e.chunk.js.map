{"version":3,"file":"static/js/291.aed5473e.chunk.js","mappings":"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","sources":["modules/color/containers/ColorContainer.jsx","modules/color/hooks/useColorLogic.js","utility/formik/formikConfig.js","utility/formik/formikHelper.js","utility/helpers/paginationHelper.js","utility/helpers/routeHelper.js","utility/helpers/searchHelper.js","utility/hooks/usePagination.js","utility/hooks/useSearch.js"],"sourcesContent":["import {lazy} from \"react\";\nimport useColorLogic from \"../hooks/useColorLogic\";\nimport useSearch from \"../../../utility/hooks/useSearch\";\nimport usePagination from \"../../../utility/hooks/usePagination\";\n\nconst ColorTable = lazy(() => import('../views/ColorTable'))\n\nconst ColorContainer = () => {\n    const {all, meta, getAllColorsLogic, deleteColorLogic} = useColorLogic()\n    const {handleSearch} = useSearch(getAllColorsLogic);\n    const {\n        currentPerPage,\n        currentPage,\n        setCurrentPageState,\n        handlePageChange,\n        handlePerPageChange\n    } = usePagination(getAllColorsLogic, meta);\n\n    return <ColorTable\n        data={{all}}\n        handleDelete={deleteColorLogic}\n        handleSearch={handleSearch}\n        paginationObject={{\n            meta,\n            currentPerPage,\n            currentPage,\n            setCurrentPageState,\n            handlePageChange,\n            handlePerPageChange\n        }}\n    />\n}\n\nexport default ColorContainer;","import {useDispatch, useSelector} from \"react-redux\";\nimport {getUniqueParams} from \"../../../utility/helpers/routeHelper\";\nimport axiosInstance from \"../../../api/axiosInstance\";\nimport {\n    setAllColorsAction,\n    setAllColorsLoadingAction,\n    setAllColorsMetaAction, setOneColorAction,\n    setOneColorLoadingAction\n} from \"../redux\";\nimport {formikErrorHandler} from \"../../../utility/formik/formikHelper\";\nimport {useNavigate} from \"react-router-dom\";\nimport colorRoutes from \"../constants/routes\";\n\nconst useColorLogic = () => {\n    const dispatch = useDispatch()\n    const navigate = useNavigate()\n    const selector = useSelector(state => state.colorsReducer),\n        all = selector.all.data,\n        meta = selector.all.meta,\n        oneColor = selector.show.data;\n\n    const getAllColorsLogic = (params = undefined) => {\n        params = params === undefined ? getUniqueParams() : params;\n        dispatch(setAllColorsLoadingAction(true))\n\n        axiosInstance.get('/admin/colors', {params}).then((response) => {\n            dispatch(setAllColorsAction(response.data.data))\n            dispatch(setAllColorsMetaAction(response.data.meta));\n        }).finally(() => dispatch(setAllColorsLoadingAction(false)))\n    }\n\n    const getOneColorLogic = (id) => {\n        dispatch(setOneColorLoadingAction(true))\n\n        axiosInstance.get(`/admin/colors/${id}`).then((response) => {\n            dispatch(setOneColorAction(response.data.data));\n        }).finally(() => dispatch(setOneColorLoadingAction(false)))\n    }\n\n    const storeColorLogic = (values, formikObject) => {\n        const {setSubmitting} = formikObject;\n\n        setSubmitting(true)\n\n        axiosInstance.post('/admin/colors', values)\n            .then(() => navigate(colorRoutes.TABLE))\n            .catch((error) => formikErrorHandler(error.response.data, formikObject))\n            .finally(() => setSubmitting(false))\n    }\n\n    const updateColorLogic = (values, id, formikObject) => {\n        const {setSubmitting} = formikObject;\n\n        setSubmitting(true)\n\n        axiosInstance.put(`/admin/colors/${id}`, values)\n            .then(() => navigate(colorRoutes.TABLE))\n            .catch((error) => formikErrorHandler(error.response.data, formikObject))\n            .finally(() => setSubmitting(false))\n    }\n\n    const deleteColorLogic = (id) => {\n        axiosInstance.delete(`admin/colors/${id}`).then(() => getAllColorsLogic())\n    }\n\n    return {\n        all,\n        meta,\n        oneColor,\n        getAllColorsLogic,\n        storeColorLogic,\n        updateColorLogic,\n        deleteColorLogic,\n        getOneColorLogic\n    }\n}\n\nexport default useColorLogic;","import PropTypes from \"prop-types\";\n\nconst FormikConfig = ({initialValues, validationSchema, onSubmit, overrideConfig}) => {\n    return {\n        initialValues,\n        validateOnBlur: true,\n        validateOnChange: false,\n        validateOnMount: false,\n        enableReinitialize: true,\n        validationSchema,\n        onSubmit,\n        ...overrideConfig\n    }\n}\n\nFormikConfig.propTypes = {\n    initialValues: PropTypes.object,\n    validationSchema: PropTypes.object.isRequired,\n    onSubmit: PropTypes.func.isRequired\n}\n\nexport default FormikConfig","import {useFormik} from \"formik\";\nimport FormikConfig from \"./formikConfig\";\nimport PropTypes from \"prop-types\";\nimport {HttpResponse} from \"../../constants/api\";\nimport toastFactory from \"../factories/toastFactory\";\nimport {isObjEmpty} from \"../Utils\";\n\nexport const formikInstance = (props) => {\n    const formikConfig = FormikConfig(props)\n\n    return useFormik(formikConfig)\n}\n\nexport const formikErrorHandler = (response, formikObject) => {\n\n    if (response.code !== HttpResponse.VALIDATION_ERRORS) {\n        return;\n    }\n\n    console.log('iam here');\n\n    const {initialValues, setErrors} = formikObject;\n\n    const errorKeys = Object.keys(initialValues);\n\n    const tmpErrors = {}\n\n    errorKeys.forEach((errorKey) => {\n        if (response.data[errorKey] !== undefined) {\n            tmpErrors[errorKey] = response.data[errorKey]\n        }\n    })\n\n    if (!isObjEmpty(tmpErrors)) {\n        setErrors(tmpErrors)\n    }\n\n    const responseErrorKeys = Object.keys(response.data);\n\n    for (let i = 0; i < responseErrorKeys.length; i++) {\n        if (!errorKeys.includes(responseErrorKeys[i])) {\n            toastFactory.error(response.data[responseErrorKeys[i]])\n            break;\n        }\n    }\n}\n\nexport const buildFormikParams = (formik) => {\n    return {\n        setErrors: formik.setErrors,\n        initialValues: formik.initialValues,\n        setSubmitting: formik.setSubmitting\n    }\n}\n\n\nformikInstance.propTypes = {\n    initialValues: PropTypes.object,\n    validationSchema: PropTypes.object.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    overrideConfig: PropTypes.object\n}","import { lazy } from \"react\"\n\nconst Pagination = lazy(() => import('../../components/table/PaginationComponent'))\nimport {getUniqueParams, updateParams} from \"./routeHelper\";\n\nexport const paginationComponent = (args) => {\n    return <Pagination {...args} />\n}\n\nexport function getValidPageNumber(page) {\n    page = Number.parseInt(page);\n    if (!Number.isInteger(page) || page < 1) {\n        page = 1;\n    }\n    return page;\n}\n\nexport function getValidPerPage(perPage) {\n    perPage = Number.parseInt(perPage);\n    if (!Number.isInteger(perPage) || (perPage < 5 || perPage > 100)) {\n        perPage = 5;\n    }\n    return perPage;\n}\n\nexport function getCurrentPage() {\n    const { page } = getUniqueParams(); // Assuming you have defined a 'page' parameter in your route\n    return getValidPageNumber(page);\n}\n\nexport function getPerPage() {\n    const { perPage } = getUniqueParams(); // Assuming you have defined a 'perPage' parameter in your route\n    return getValidPerPage(perPage);\n}\n\nexport function getNextPageNumber() {\n    let currentPage = getCurrentPage();\n    return ++currentPage;\n}\n\nexport function getPreviousPageNumber() {\n    let currentPage = getCurrentPage();\n    if (currentPage <= 1) {\n        return 1;\n    }\n    return --currentPage;\n}\n\nexport function updatePaginationParams(page, perPage) {\n    const updatedParams = new URLSearchParams(window.location.search);\n\n    updatedParams.set('page', getValidPageNumber(page).toString());\n    updatedParams.set('per_page', getValidPerPage(perPage).toString());\n\n    updateParams(updatedParams.toString())\n}\n\n\n\nexport function generatePaginationParams(page, perPage) {\n    page = getCurrentPage()\n    perPage = getPerPage()\n\n    return {page, per_page: perPage}\n}","export const parseRoute = (url = '', bindings = {}) => {\n    let routePath = url;\n    for (const [key, value] of Object.entries(bindings)) {\n        routePath = routePath.replace(`:${key}`, value);\n    }\n\n    return routePath;\n}\n\nexport function getUniqueParams() {\n    const urlParams = new URLSearchParams(window.location.search);\n\n    const uniqueParams = new Set();\n    \n    urlParams.forEach((value, key) => {\n        uniqueParams.add(key);\n    });\n    \n    const uniqueParamsArray = Array.from(uniqueParams);\n\n    const uniqueUrlParams = new URLSearchParams();\n\n    uniqueParamsArray.forEach((item) => uniqueUrlParams.append(item, urlParams.get(item)));\n\n    return uniqueUrlParams;\n}\n\nexport const updateParams = (params) => {\n    const newUrl = `${window.location.pathname}?${params}`;\n    window.history.pushState({ path: newUrl }, '', newUrl);\n}\n\nexport const goBack = () => {\n    history.back()\n}","import {getUniqueParams, updateParams} from \"./routeHelper\";\n\nexport const pushSearchParam = (value) => {\n    const params = getUniqueParams()\n    params.set('handle', value)\n    updateParams(params.toString())\n}\n\nexport const getSearchParam = () => {\n    const params = getUniqueParams();\n\n    return params.get('handle') || '';\n}","// paginationLogic.js\nimport { useEffect, useState } from \"react\";\nimport {getValidPageNumber, getValidPerPage, updatePaginationParams} from \"../helpers/paginationHelper\";\n\nconst usePagination = (getAllDataLogic, meta) => {\n    const [currentPerPage, setCurrentPerPage] = useState(getValidPerPage());\n    const [currentPage, setCurrentPageState] = useState(getValidPageNumber());\n\n    useEffect(() => {\n        getAllDataLogic();\n    }, [currentPage, currentPerPage]);\n\n    useEffect(() => {\n        setCurrentPerPage(meta.perPage);\n        setCurrentPageState(meta.currentPage);\n    }, [meta]);\n\n    const handlePageChange = (page) => {\n        setCurrentPageState(page);\n        updatePaginationParams(page, currentPerPage);\n    };\n\n    const handlePerPageChange = (perPage) => {\n        setCurrentPerPage(perPage);\n        updatePaginationParams(currentPage, perPage);\n        setCurrentPerPage(perPage);\n    };\n\n    return {\n        currentPerPage,\n        currentPage,\n        handlePageChange,\n        handlePerPageChange,\n        setCurrentPageState\n    };\n};\n\nexport default usePagination;\n","import {pushSearchParam} from \"../helpers/searchHelper\";\n\nconst useSearch = (getAllDataLogic) => {\n    const handleSearch = (value) => {\n        pushSearchParam(value)\n        getAllDataLogic()\n    }\n\n    return {handleSearch}\n}\n\nexport default useSearch;"],"names":["ColorTable","lazy","ColorContainer","all","meta","getAllColorsLogic","deleteColorLogic","useColorLogic","handleSearch","useSearch","currentPerPage","currentPage","setCurrentPageState","handlePageChange","handlePerPageChange","usePagination","_jsx","data","handleDelete","paginationObject","dispatch","useDispatch","navigate","useNavigate","selector","useSelector","state","colorsReducer","oneColor","show","params","arguments","length","undefined","getUniqueParams","setAllColorsLoadingAction","axiosInstance","get","then","response","setAllColorsAction","setAllColorsMetaAction","finally","storeColorLogic","values","formikObject","setSubmitting","post","colorRoutes","TABLE","catch","error","formikErrorHandler","updateColorLogic","id","put","concat","delete","getOneColorLogic","setOneColorLoadingAction","setOneColorAction","FormikConfig","_ref","initialValues","validationSchema","onSubmit","overrideConfig","validateOnBlur","validateOnChange","validateOnMount","enableReinitialize","propTypes","PropTypes","isRequired","formikInstance","props","formikConfig","useFormik","code","HttpResponse","VALIDATION_ERRORS","console","log","setErrors","errorKeys","Object","keys","tmpErrors","forEach","errorKey","isObjEmpty","responseErrorKeys","i","includes","toastFactory","buildFormikParams","formik","Pagination","paginationComponent","args","getValidPageNumber","page","Number","parseInt","isInteger","getValidPerPage","perPage","updatePaginationParams","updatedParams","URLSearchParams","window","location","search","set","toString","updateParams","parseRoute","bindings","routePath","key","value","entries","replace","urlParams","uniqueParams","Set","add","uniqueParamsArray","Array","from","uniqueUrlParams","item","append","newUrl","pathname","history","pushState","path","goBack","back","pushSearchParam","getSearchParam","getAllDataLogic","setCurrentPerPage","useState","useEffect"],"sourceRoot":""}