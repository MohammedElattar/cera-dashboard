{"version":3,"file":"static/js/511.2bd2d993.chunk.js","mappings":"uJAGA,MAOA,EAPqBA,IACVC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACHC,EAAAA,EAAAA,KAACC,EAAAA,EAAK,IAAKL,KACXI,EAAAA,EAAAA,KAACE,EAAAA,EAAQ,CAACC,QAASP,EAAMQ,U,+CCHjC,MAQA,EARiBC,IAAgB,IAAf,QAACF,GAAQE,EACvB,OAAOF,IAAWH,EAAAA,EAAAA,KAAA,QAAMM,UAAW,qBAAqBP,SAAEI,GAAe,C,mNCD7E,MAcA,EAduBI,CAACC,EAAcC,KAClC,MAAOC,EAAQC,IAAmBC,EAAAA,EAAAA,WAAS,IAE3CC,EAAAA,EAAAA,YAAU,KACNF,GAAiBH,IAAgBM,EAAAA,EAAAA,IAAWL,GAAQ,GACrD,CAACA,EAAQD,IAMZ,MAAO,CAACO,aAJaA,IACVL,EAGU,E,uBCLzB,MA2DA,EA3DkBL,IAA+B,IAA9B,SAACW,EAAQ,aAAEC,GAAaZ,EACvC,MAAM,aAACa,EAAY,OAAEC,EAAM,OAAEV,EAAM,WAAEW,EAAU,aAAEC,EAAY,aAAEb,EAAY,cAAEc,GAAiBL,EACxFM,GAAaC,EAAAA,EAAAA,KAAYC,GAASA,EAAMC,cAAcC,KAAKC,WAC3D,aAACb,GAAgBR,EAAeC,EAAcC,GAIpD,OAFAoB,EAAAA,EAAAA,GAAYN,GAChBO,QAAQC,IAAIZ,IAEJtB,EAAAA,EAAAA,MAACmC,EAAAA,EAAI,CAAAjC,SAAA,EACDC,EAAAA,EAAAA,KAACiC,EAAAA,EAAU,CAAAlC,UACPF,EAAAA,EAAAA,MAACqC,EAAAA,EAAS,CAACC,IAAI,KAAIpC,SAAA,CAAEiB,EAAW,SAAW,MAAM,eAErDhB,EAAAA,EAAAA,KAACoC,EAAAA,EAAQ,CAAArC,UACLC,EAAAA,EAAAA,KAACqC,EAAAA,EAAI,CAACC,SAAUpB,EAAanB,UACzBF,EAAAA,EAAAA,MAAC0C,EAAAA,EAAG,CAAAxC,SAAA,EACAF,EAAAA,EAAAA,MAAC2C,EAAAA,EAAG,CAACC,GAAG,KAAKnC,UAAU,OAAMP,SAAA,EACzBC,EAAAA,EAAAA,KAAC0C,EAAAA,EAAK,CAACpC,UAAU,aAAaqC,IAAI,OAAM5C,SAAC,gBAGzCC,EAAAA,EAAAA,KAAC4C,EAAAA,EAAe,CACZC,OAAQzB,EACR0B,SAAUzB,EACV0B,KAAK,OACLC,KAAK,OACLC,GAAG,OACHC,YAAY,MACZC,MAAOhC,EAAO6B,KACdI,QAAS3C,EAAOuC,OAAQ,EACxB5C,MAAOK,EAAOuC,WAGtBnD,EAAAA,EAAAA,MAAC2C,EAAAA,EAAG,CAACC,GAAG,KAAI1C,SAAA,EACRC,EAAAA,EAAAA,KAAC0C,EAAAA,EAAK,CAACpC,UAAU,aAAaqC,IAAI,OAAM5C,SAAC,gBAGrCC,EAAAA,EAAAA,KAACqD,EAAAA,GAAU,CACP/C,UAAW,QACXgD,aAAcnC,EAAOoC,MAAQ,UAC7BT,SAAWU,GAAUlC,EAAc,OAAQkC,EAAMC,OAEpDhD,EAAO8C,OAAQvD,EAAAA,EAAAA,KAAA,QAAAD,SAAOU,EAAO8C,WAEtCvD,EAAAA,EAAAA,KAACwC,EAAAA,EAAG,CAACkB,GAAI,GAAIpD,UAAU,yBAAwBP,UAC3CF,EAAAA,EAAAA,MAAA,OAAKS,UAAU,SAAQP,SAAA,EACnBF,EAAAA,EAAAA,MAAC8D,EAAAA,EAAM,CAACZ,KAAK,SAASzC,UAAU,OAAOkD,MAAM,UAAUI,UAAW7C,IAAehB,SAAA,CAC5ES,IAAiBX,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EAAEC,EAAAA,EAAAA,KAAC6D,EAAAA,EAAO,CAACC,KAAK,KAAKf,KAAK,UAAS/C,EAAAA,EAAAA,KAAA,QAAMM,UAAU,QAAOP,SAAC,mBAC3ES,GAAgB,aAEtBR,EAAAA,EAAAA,KAAC2D,EAAAA,EAAM,CAACI,SAAO,EAACP,MAAM,YAAYT,KAAK,SAASiB,QAASC,EAAAA,GAAOlE,SAAC,0BAQlF,C,0DC9DR,MAAM8B,EAAc,WAAwB,IAAvBqC,EAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,IACjCtD,EAAAA,EAAAA,YAAU,KACFqD,GACAI,EAAAA,EAAaC,UACbD,EAAAA,EAAa1C,QAAQ,YAErB0C,EAAAA,EAAaC,SACjB,GACD,CAACL,GACR,C","sources":["components/form/CustomInput.jsx","components/form/ErrorBox.jsx","utility/hooks/useFormikLogic.js","modules/color/views/ColorForm.jsx","utility/helpers/toastHelper.js"],"sourcesContent":["import { Input} from \"reactstrap\"\nimport ErrorBox from \"./ErrorBox\";\n\nconst CustomInput = (props) => {\n    return <>\n        <Input {...props} />\n        <ErrorBox message={props.error}/>\n    </>\n}\n\nexport default CustomInput","import PropTypes from \"prop-types\";\nimport {FormFeedback} from \"reactstrap\";\n\nconst ErrorBox = ({message}) => {\n    return message && <span className={'alert alert-danger'}>{message}</span>\n}\n\nErrorBox.propTypes = {\n    message: PropTypes.string\n}\n\nexport default ErrorBox","import {useEffect, useState} from \"react\";\nimport {isObjEmpty} from \"../Utils\";\n\nconst useFormikLogic = (isSubmitting, errors) => {\n    const [submit, setShouldSubmit] = useState(true);\n\n    useEffect(() => {\n        setShouldSubmit(!isSubmitting && isObjEmpty(errors))\n    }, [errors, isSubmitting])\n\n    const shouldSubmit = () => {\n        return submit;\n    }\n\n    return {shouldSubmit}\n}\n\nexport default useFormikLogic;","// ** Reactstrap Imports\nimport {Row, Col, Form, Card, Label, Button, CardBody, CardTitle, CardHeader, Spinner} from 'reactstrap'\nimport CustomTextInput from \"../../../components/form/CustomInput\";\nimport {toastLoader} from \"../../../utility/helpers/toastHelper\";\nimport {useSelector} from \"react-redux\";\nimport {goBack} from \"../../../utility/helpers/routeHelper\";\nimport useFormikLogic from \"../../../utility/hooks/useFormikLogic\";\nimport InputColor from \"react-input-color\";\n\nconst ColorForm = ({inUpdate, formikObject}) => {\n    const {handleSubmit, values, errors, handleBlur, handleChange, isSubmitting, setFieldValue} = formikObject;\n    const isFetching = useSelector(state => state.colorsReducer.show.loading);\n    const {shouldSubmit} = useFormikLogic(isSubmitting, errors)\n\n    toastLoader(isFetching)\nconsole.log(values)\n    return (\n        <Card>\n            <CardHeader>\n                <CardTitle tag='h4'>{inUpdate ? 'Update' : 'Add'} Color</CardTitle>\n            </CardHeader>\n            <CardBody>\n                <Form onSubmit={handleSubmit}>\n                    <Row>\n                        <Col sm='12' className='mb-1'>\n                            <Label className='form-label' for='name'>\n                                Color Name\n                            </Label>\n                            <CustomTextInput\n                                onBlur={handleBlur}\n                                onChange={handleChange}\n                                type='text'\n                                name='name'\n                                id='name'\n                                placeholder='Red'\n                                value={values.name}\n                                invalid={errors.name && true}\n                                error={errors.name}\n                            />\n                        </Col>\n                        <Col sm='12'>\n                            <Label className='form-label' for='name'>\n                                Color Name\n                            </Label>\n                                <InputColor\n                                    className={'w-100'}\n                                    initialValue={values.code || '#eeeeee'}\n                                    onChange={(color) => setFieldValue('code', color.hex)}\n                                />\n                                {errors.code && <span>{errors.code}</span>}\n                        </Col>\n                        <Col xs={12} className='text-center mt-2 pt-50'>\n                            <div className='d-flex'>\n                                <Button type='submit' className='me-1' color='primary' disabled={!shouldSubmit()}>\n                                    {isSubmitting && (<><Spinner size='sm' type='grow' /><span className='ms-50'>Loading...</span></>)}\n                                    {!isSubmitting && 'Submit'}\n                                </Button>\n                                <Button outline color='secondary' type='button' onClick={goBack}>\n                                    Go back\n                                </Button>\n                            </div>\n                        </Col>\n                    </Row>\n                </Form>\n            </CardBody>\n        </Card>\n    )\n}\nexport default ColorForm\n","import {useEffect} from \"react\";\nimport toastFactory from \"../factories/toastFactory\";\n\nexport const toastLoader = (isLoading = false) => {\n    useEffect(() => {\n        if (isLoading) {\n            toastFactory.dismiss()\n            toastFactory.loading('Loading')\n        } else {\n            toastFactory.dismiss()\n        }\n    }, [isLoading])\n}"],"names":["props","_jsxs","_Fragment","children","_jsx","Input","ErrorBox","message","error","_ref","className","useFormikLogic","isSubmitting","errors","submit","setShouldSubmit","useState","useEffect","isObjEmpty","shouldSubmit","inUpdate","formikObject","handleSubmit","values","handleBlur","handleChange","setFieldValue","isFetching","useSelector","state","colorsReducer","show","loading","toastLoader","console","log","Card","CardHeader","CardTitle","tag","CardBody","Form","onSubmit","Row","Col","sm","Label","for","CustomTextInput","onBlur","onChange","type","name","id","placeholder","value","invalid","InputColor","initialValue","code","color","hex","xs","Button","disabled","Spinner","size","outline","onClick","goBack","isLoading","arguments","length","undefined","toastFactory","dismiss"],"sourceRoot":""}