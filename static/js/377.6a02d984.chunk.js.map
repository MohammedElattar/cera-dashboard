{"version":3,"file":"static/js/377.6a02d984.chunk.js","mappings":"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","sources":["modules/order/containers/OrderContainer.jsx","modules/order/hooks/useOrderLogic.js","utility/helpers/paginationHelper.js","utility/helpers/routeHelper.js","utility/helpers/searchHelper.js","utility/hooks/usePagination.js","utility/hooks/useSearch.js"],"sourcesContent":["import useSearch from \"../../../utility/hooks/useSearch\";\nimport usePagination from \"../../../utility/hooks/usePagination\";\nimport useOrderLogic from \"../../order/hooks/useOrderLogic\";\nimport {lazy} from \"react\";\n\nconst OrderTable = lazy(() => import('../views/OrderTable'))\n\nconst OrderContainer = () => {\n    const {all, meta, getAllOrdersLogic} = useOrderLogic()\n    const {handleSearch} = useSearch(getAllOrdersLogic);\n    const {\n        currentPerPage,\n        currentPage,\n        setCurrentPageState,\n        handlePageChange,\n        handlePerPageChange\n    } = usePagination(getAllOrdersLogic, meta);\n\n    return <OrderTable\n        data={{all}}\n        handleSearch={handleSearch}\n        paginationObject={{\n            meta,\n            currentPerPage,\n            currentPage,\n            setCurrentPageState,\n            handlePageChange,\n            handlePerPageChange\n        }}\n    />\n}\n\nexport default OrderContainer;","import {useDispatch, useSelector} from \"react-redux\";\nimport {getUniqueParams} from \"../../../utility/helpers/routeHelper\";\nimport {\n\n} from \"../../product/redux\";\nimport axiosInstance from \"../../../api/axiosInstance\";\nimport {setAllOrdersLoading, setAllOrdersLogic, setAllOrdersMetaLogic, setOneOrderLogic} from \"../redux\";\n\nconst useOrderLogic = () => {\n    const dispatch = useDispatch()\n    const selector = useSelector(state => state.ordersReducer),\n        all = selector.all.data,\n        meta = selector.all.meta,\n        oneOrder = selector.show;\n\n    const getAllOrdersLogic = (params = undefined) => {\n        params = params === undefined ? getUniqueParams() : params;\n        dispatch(setAllOrdersLoading(true))\n\n        axiosInstance.get('/api/admin/orders', {params}).then((response) => {\n            dispatch(setAllOrdersLogic(response.data.data))\n            dispatch(setAllOrdersMetaLogic(response.data.meta));\n        })\n            .finally(() => dispatch(setAllOrdersLoading(false)))\n    }\n\n    const getOneOrderLogic = (id) => {\n        axiosInstance.get(`/api/admin/orders/${id}`).then((response) => {\n            dispatch(setOneOrderLogic(response.data.data))\n        })\n    }\n\n    return {\n        all,\n        meta,\n        oneOrder,\n        getAllOrdersLogic,\n        getOneOrderLogic\n    }\n}\n\nexport default useOrderLogic","import { lazy } from \"react\"\n\nconst Pagination = lazy(() => import('../../components/table/PaginationComponent'))\nimport {getUniqueParams, updateParams} from \"./routeHelper\";\n\nexport const paginationComponent = (args) => {\n    return <Pagination {...args} />\n}\n\nexport function getValidPageNumber(page) {\n    page = Number.parseInt(page);\n    if (!Number.isInteger(page) || page < 1) {\n        page = 1;\n    }\n    return page;\n}\n\nexport function getValidPerPage(perPage) {\n    perPage = Number.parseInt(perPage);\n    if (!Number.isInteger(perPage) || (perPage < 5 || perPage > 100)) {\n        perPage = 5;\n    }\n    return perPage;\n}\n\nexport function getCurrentPage() {\n    const { page } = getUniqueParams(); // Assuming you have defined a 'page' parameter in your route\n    return getValidPageNumber(page);\n}\n\nexport function getPerPage() {\n    const { perPage } = getUniqueParams(); // Assuming you have defined a 'perPage' parameter in your route\n    return getValidPerPage(perPage);\n}\n\nexport function getNextPageNumber() {\n    let currentPage = getCurrentPage();\n    return ++currentPage;\n}\n\nexport function getPreviousPageNumber() {\n    let currentPage = getCurrentPage();\n    if (currentPage <= 1) {\n        return 1;\n    }\n    return --currentPage;\n}\n\nexport function updatePaginationParams(page, perPage) {\n    const updatedParams = new URLSearchParams(window.location.search);\n\n    updatedParams.set('page', getValidPageNumber(page).toString());\n    updatedParams.set('per_page', getValidPerPage(perPage).toString());\n\n    updateParams(updatedParams.toString())\n}\n\n\n\nexport function generatePaginationParams(page, perPage) {\n    page = getCurrentPage()\n    perPage = getPerPage()\n\n    return {page, per_page: perPage}\n}","export const parseRoute = (url = '', bindings = {}) => {\n    let routePath = url;\n    for (const [key, value] of Object.entries(bindings)) {\n        routePath = routePath.replace(`:${key}`, value);\n    }\n\n    return routePath;\n}\n\nexport function getUniqueParams() {\n    const urlParams = new URLSearchParams(window.location.search);\n\n    const uniqueParams = new Set();\n    \n    urlParams.forEach((value, key) => {\n        uniqueParams.add(key);\n    });\n    \n    const uniqueParamsArray = Array.from(uniqueParams);\n\n    const uniqueUrlParams = new URLSearchParams();\n\n    uniqueParamsArray.forEach((item) => uniqueUrlParams.append(item, urlParams.get(item)));\n\n    return uniqueUrlParams;\n}\n\nexport const updateParams = (params) => {\n    const newUrl = `${window.location.pathname}?${params}`;\n    window.history.pushState({ path: newUrl }, '', newUrl);\n}\n\nexport const goBack = () => {\n    history.back()\n}","import {getUniqueParams, updateParams} from \"./routeHelper\";\n\nexport const pushSearchParam = (value) => {\n    const params = getUniqueParams()\n    params.set('handle', value)\n    updateParams(params.toString())\n}\n\nexport const getSearchParam = () => {\n    const params = getUniqueParams();\n\n    return params.get('handle') || '';\n}","// paginationLogic.js\nimport { useEffect, useState } from \"react\";\nimport {getValidPageNumber, getValidPerPage, updatePaginationParams} from \"../helpers/paginationHelper\";\n\nconst usePagination = (getAllDataLogic, meta) => {\n    const [currentPerPage, setCurrentPerPage] = useState(getValidPerPage());\n    const [currentPage, setCurrentPageState] = useState(getValidPageNumber());\n\n    useEffect(() => {\n        getAllDataLogic();\n    }, [currentPage, currentPerPage]);\n\n    useEffect(() => {\n        setCurrentPerPage(meta.perPage);\n        setCurrentPageState(meta.currentPage);\n    }, [meta]);\n\n    const handlePageChange = (page) => {\n        setCurrentPageState(page);\n        updatePaginationParams(page, currentPerPage);\n    };\n\n    const handlePerPageChange = (perPage) => {\n        setCurrentPerPage(perPage);\n        updatePaginationParams(currentPage, perPage);\n        setCurrentPerPage(perPage);\n    };\n\n    return {\n        currentPerPage,\n        currentPage,\n        handlePageChange,\n        handlePerPageChange,\n        setCurrentPageState\n    };\n};\n\nexport default usePagination;\n","import {pushSearchParam} from \"../helpers/searchHelper\";\n\nconst useSearch = (getAllDataLogic) => {\n    const handleSearch = (value) => {\n        pushSearchParam(value)\n        getAllDataLogic()\n    }\n\n    return {handleSearch}\n}\n\nexport default useSearch;"],"names":["OrderTable","lazy","OrderContainer","all","meta","getAllOrdersLogic","useOrderLogic","handleSearch","useSearch","currentPerPage","currentPage","setCurrentPageState","handlePageChange","handlePerPageChange","usePagination","_jsx","data","paginationObject","dispatch","useDispatch","selector","useSelector","state","ordersReducer","oneOrder","show","params","arguments","length","undefined","getUniqueParams","setAllOrdersLoading","axiosInstance","get","then","response","setAllOrdersLogic","setAllOrdersMetaLogic","finally","getOneOrderLogic","id","concat","setOneOrderLogic","Pagination","paginationComponent","args","getValidPageNumber","page","Number","parseInt","isInteger","getValidPerPage","perPage","updatePaginationParams","updatedParams","URLSearchParams","window","location","search","set","toString","updateParams","parseRoute","bindings","routePath","key","value","Object","entries","replace","urlParams","uniqueParams","Set","forEach","add","uniqueParamsArray","Array","from","uniqueUrlParams","item","append","newUrl","pathname","history","pushState","path","goBack","back","pushSearchParam","getSearchParam","getAllDataLogic","setCurrentPerPage","useState","useEffect"],"sourceRoot":""}