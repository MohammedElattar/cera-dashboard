{"version":3,"file":"static/js/566.5e9311ea.chunk.js","mappings":"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","sources":["components/table/CustomTable.jsx","components/table/dropDownItems/DeleteDropDownItem.jsx","components/table/dropDownItems/TableActions.jsx","modules/contactUs/hooks/useContactUsLogic.js","modules/contactUs/views/columns.js","modules/contactUs/views/ContactUsTable.jsx","modules/contactUs/containers/ContactUsContainer.jsx","utility/helpers/paginationHelper.js","utility/helpers/routeHelper.js","utility/helpers/searchHelper.js","utility/helpers/toastHelper.js","utility/hooks/usePagination.js","utility/hooks/useSearch.js"],"sourcesContent":["import React, {Fragment, useState} from \"react\";\nimport {Button, Card, CardHeader, CardTitle, Col, Input, InputGroup, Label, Row} from \"reactstrap\";\nimport '../../@core/scss/react/libs/tables/react-dataTable-component.scss'\nimport {ChevronDown, Search} from \"react-feather\";\nimport DataTable from 'react-data-table-component';\nimport {paginationComponent} from \"../../utility/helpers/paginationHelper\";\nimport {getSearchParam} from \"../../utility/helpers/searchHelper\";\n\nconst CustomTable = ({\n                        buttons = [],\n                         title,\n                         columns,\n                         data,\n                         paginationObject,\n                         pagination = false,\n                         searchable = true,\n                         handleSearch,\n                         entriesPerPageOptions = [5, 10, 25, 50, 75, 100]\n                     }) => {\n    const [searchValue, setSearchValue] = useState(getSearchParam());\n\n    return (\n        <Fragment>\n            <Row>\n                <Col sm='12'>\n                    <Fragment>\n                        <Card>\n                            <CardHeader className='border-bottom'>\n                                <CardTitle tag='h4'>{title}</CardTitle>\n                                {buttons}\n                            </CardHeader>\n                            <Row className='mx-0 mt-1 mb-50'>\n                                {pagination && (\n                                    <Col sm='6'>\n                                        <div className='d-flex align-items-center'>\n                                            <Label for='entries-select'>Show</Label>\n                                            <Input\n                                                className='dataTable-select'\n                                                type='select'\n                                                id='entries-select'\n                                                value={paginationObject.currentPerPage}\n                                                onChange={(e) => paginationObject.handlePerPageChange(e.target.value)}\n                                            >\n                                                {entriesPerPageOptions.map(option => (\n                                                    <option key={option} value={option}>{option}</option>\n                                                ))}\n                                            </Input>\n                                            <Label for='entries-select'>entries</Label>\n                                        </div>\n                                    </Col>\n                                )}\n                                {searchable && (\n                                    <Col className='d-flex align-items-center justify-content-sm-end mt-sm-0 mt-1'\n                                         sm='6'>\n                                        <InputGroup size=\"sm\" style={{ width: 'auto' }}>\n                                            <span className=\"input-group-text\">\n                                                <Search onClick={() => handleSearch(searchValue)}/>\n                                            </span>\n                                            <Input\n                                                className='dataTable-filter'\n                                                type='text'\n                                                id='search-input'\n                                                value={searchValue}\n                                                onChange={(event) => {\n                                                    const value = event.target.value;\n\n                                                    if (!value && !!searchValue) {\n                                                        handleSearch('')\n                                                    }\n\n                                                    setSearchValue(value);\n                                                }}\n                                                placeholder=\"Search...\"\n                                            />\n                                        </InputGroup>\n                                    </Col>\n                                )}\n                            </Row>\n                            <div className='react-dataTable'>\n                                <DataTable\n                                    bordered\n                                    noHeader\n                                    pagination={pagination}\n                                    paginationComponent={() => paginationComponent(paginationObject)}\n                                    paginationServer\n                                    className='react-dataTable'\n                                    columns={columns}\n                                    sortIcon={<ChevronDown size={10}/>}\n                                    data={data}\n                                />\n                            </div>\n                        </Card>\n                    </Fragment>\n                </Col>\n            </Row>\n        </Fragment>\n    );\n}\n\nexport default CustomTable;\n","import { Trash } from \"react-feather\";\nimport { Button } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport MySwal from \"sweetalert2\";\n\nconst DeleteDropDownItem = ({isLoading, handleDelete}) => {\n    const handleConfirmText = () => {\n        return MySwal.fire({\n            title: 'Are you sure?',\n            text: \"You won't be able to revert this!\",\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonText: 'Yes, delete it!',\n            customClass: {\n                confirmButton: 'btn btn-primary',\n                cancelButton: 'btn btn-outline-danger ms-1'\n            },\n            buttonsStyling: false\n        }).then(function (result) {\n            if (result.isConfirmed === true) {\n                handleDelete()\n            }\n\n            if (isLoading === false) {\n                MySwal.fire({\n                    icon: 'success',\n                    title: 'Deleted!',\n                    text: 'Your file has been deleted.',\n                    customClass: {\n                        confirmButton: 'btn btn-success'\n                    }\n                })\n            }\n        })\n    }\n    return (\n        <>\n            <Button\n                onClick={handleConfirmText}\n                size='sm'\n                color='transparent'\n                className='btn btn-icon'\n            >\n                <Trash className='font-medium-2' />\n            </Button>\n        </>\n    )\n}\n\nDeleteDropDownItem.propTypes = {\n    handleDelete: PropTypes.func.isRequired\n}\n\nexport default DeleteDropDownItem;","const TableActions = ({actions}) => {\n    return <div className='d-flex align-items-center permissions-actions'>\n          {actions}\n        </div>\n}\n\nexport default TableActions;","import {useDispatch, useSelector} from \"react-redux\";\nimport axiosInstance from \"../../../api/axiosInstance\";\nimport {\n    deleteContactUsLoadingAction,\n    setAllContactUsAction,\n    setAllContactUsLoadingAction,\n    setAllContactUsMetaAction\n} from \"../redux\";\nimport {getUniqueParams} from \"../../../utility/helpers/routeHelper\";\n\nconst useContactUsLogic = () => {\n    const dispatch = useDispatch(),\n        selector = useSelector((state) => state.contactUsReducer),\n        all = selector.all.data,\n        allLoading = selector.all.loading,\n        meta = selector.all.meta;\n\n    const getContactUsTableLogic = (params = undefined) => {\n        params = params === undefined ? getUniqueParams() : params;\n        dispatch(setAllContactUsLoadingAction(true))\n\n        axiosInstance.get('/admin/contact_us', {params}).then((response) => {\n\n            dispatch(setAllContactUsAction(response.data.data));\n            dispatch(setAllContactUsMetaAction(response.data.meta))\n       }).finally(() => dispatch(setAllContactUsLoadingAction(false)))\n    }\n\n    const deleteContactUsLogic = (id) => {\n        dispatch(deleteContactUsLoadingAction(true))\n        axiosInstance.delete(`/admin/contact_us/${id}`).then(() => {\n            getContactUsTableLogic()\n        }).finally(() => dispatch(deleteContactUsLoadingAction(false)))\n    }\n\n    return {\n        getContactUsTableLogic,\n        deleteContactUsLogic,\n        all,\n        allLoading,\n        meta\n    }\n}\n\nexport default useContactUsLogic;","import DeleteDropDownItem from \"../../../components/table/dropDownItems/DeleteDropDownItem\";\nimport TableActions from \"../../../components/table/dropDownItems/TableActions\";\n\nconst generateActions = (row, props) => {\n    const {handleDelete} = props;\n    const actions = [<DeleteDropDownItem key={1} handleDelete={() => handleDelete(row.id)}/>]\n\n    return <TableActions row={row} actions={actions}/>\n}\n\nconst getColumns = (props) => {\n    return [\n        {\n            sortable: true,\n            name: 'Name',\n            minwidth: '250px',\n            selector: row => row.name\n        },\n        {\n            sortable: true,\n            name: 'Email',\n            minwidth: '250px',\n            selector: row => row.email\n        },\n        {\n            sortable: true,\n            name: 'Phone',\n            minwidth: '250px',\n            selector: row => row.phone\n        },\n        {\n            sortable: true,\n            name: 'Message',\n            minwidth: '250px',\n            selector: row => row.message\n        },\n        {\n            name: 'Actions',\n            minwidth: '100px',\n            cell: row => generateActions(row, props)\n        }\n    ];\n}\n\nexport default getColumns;","import {useSelector} from \"react-redux\";\nimport {toastLoader} from \"../../../utility/helpers/toastHelper\";\nimport CustomTable from \"../../../components/table/CustomTable\";\nimport getColumns from \"./columns\";\n\nconst ContactUsTable = ({data, paginationObject, handleDelete, handleSearch}) => {\n    const tableLoading = useSelector(state => state.contactUsReducer.all.loading)\n    const deleteLoading = useSelector(state => state.contactUsReducer.deleteLoading);\n\n    toastLoader(tableLoading || deleteLoading)\n\n    return <CustomTable\n        handleSearch={handleSearch}\n        columns={getColumns({handleDelete})}\n        data={data.all}\n        pagination={true}\n        paginationObject={paginationObject}\n        handlePageChange\n        title='Contact Us'\n    />\n}\n\nexport default ContactUsTable;","import useContactUsLogic from \"../hooks/useContactUsLogic\";\nimport usePagination from \"../../../utility/hooks/usePagination\";\nimport ContactUsTable from \"../views/ContactUsTable\";\nimport useSearch from \"../../../utility/hooks/useSearch\";\n\nconst ContactUsContainer = () => {\n    const {all, meta, getContactUsTableLogic, deleteContactUsLogic} = useContactUsLogic()\n    const {handleSearch} = useSearch(getContactUsTableLogic);\n    const {\n        currentPerPage,\n        currentPage,\n        setCurrentPageState,\n        handlePageChange,\n        handlePerPageChange\n    } = usePagination(getContactUsTableLogic, meta);\n\n    return <ContactUsTable\n        data={{all}}\n        handleDelete={deleteContactUsLogic}\n        handleSearch={handleSearch}\n        paginationObject={{\n            meta,\n            currentPerPage,\n            currentPage,\n            setCurrentPageState,\n            handlePageChange,\n            handlePerPageChange\n        }}\n    />\n}\n\nexport default ContactUsContainer;","import { lazy } from \"react\"\n\nconst Pagination = lazy(() => import('../../components/table/PaginationComponent'))\nimport {getUniqueParams, updateParams} from \"./routeHelper\";\n\nexport const paginationComponent = (args) => {\n    return <Pagination {...args} />\n}\n\nexport function getValidPageNumber(page) {\n    page = Number.parseInt(page);\n    if (!Number.isInteger(page) || page < 1) {\n        page = 1;\n    }\n    return page;\n}\n\nexport function getValidPerPage(perPage) {\n    perPage = Number.parseInt(perPage);\n    if (!Number.isInteger(perPage) || (perPage < 5 || perPage > 100)) {\n        perPage = 5;\n    }\n    return perPage;\n}\n\nexport function getCurrentPage() {\n    const { page } = getUniqueParams(); // Assuming you have defined a 'page' parameter in your route\n    return getValidPageNumber(page);\n}\n\nexport function getPerPage() {\n    const { perPage } = getUniqueParams(); // Assuming you have defined a 'perPage' parameter in your route\n    return getValidPerPage(perPage);\n}\n\nexport function getNextPageNumber() {\n    let currentPage = getCurrentPage();\n    return ++currentPage;\n}\n\nexport function getPreviousPageNumber() {\n    let currentPage = getCurrentPage();\n    if (currentPage <= 1) {\n        return 1;\n    }\n    return --currentPage;\n}\n\nexport function updatePaginationParams(page, perPage) {\n    const updatedParams = new URLSearchParams(window.location.search);\n\n    updatedParams.set('page', getValidPageNumber(page).toString());\n    updatedParams.set('per_page', getValidPerPage(perPage).toString());\n\n    updateParams(updatedParams.toString())\n}\n\n\n\nexport function generatePaginationParams(page, perPage) {\n    page = getCurrentPage()\n    perPage = getPerPage()\n\n    return {page, per_page: perPage}\n}","export const parseRoute = (url = '', bindings = {}) => {\n    let routePath = url;\n    for (const [key, value] of Object.entries(bindings)) {\n        routePath = routePath.replace(`:${key}`, value);\n    }\n\n    return routePath;\n}\n\nexport function getUniqueParams() {\n    const urlParams = new URLSearchParams(window.location.search);\n\n    const uniqueParams = new Set();\n    \n    urlParams.forEach((value, key) => {\n        uniqueParams.add(key);\n    });\n    \n    const uniqueParamsArray = Array.from(uniqueParams);\n\n    const uniqueUrlParams = new URLSearchParams();\n\n    uniqueParamsArray.forEach((item) => uniqueUrlParams.append(item, urlParams.get(item)));\n\n    return uniqueUrlParams;\n}\n\nexport const updateParams = (params) => {\n    const newUrl = `${window.location.pathname}?${params}`;\n    window.history.pushState({ path: newUrl }, '', newUrl);\n}\n\nexport const goBack = () => {\n    history.back()\n}","import {getUniqueParams, updateParams} from \"./routeHelper\";\n\nexport const pushSearchParam = (value) => {\n    const params = getUniqueParams()\n    params.set('handle', value)\n    updateParams(params.toString())\n}\n\nexport const getSearchParam = () => {\n    const params = getUniqueParams();\n\n    return params.get('handle') || '';\n}","import {useEffect} from \"react\";\nimport toastFactory from \"../factories/toastFactory\";\n\nexport const toastLoader = (isLoading = false) => {\n    useEffect(() => {\n        if (isLoading) {\n            toastFactory.dismiss()\n            toastFactory.loading('Loading')\n        } else {\n            toastFactory.dismiss()\n        }\n    }, [isLoading])\n}","// paginationLogic.js\nimport { useEffect, useState } from \"react\";\nimport {getValidPageNumber, getValidPerPage, updatePaginationParams} from \"../helpers/paginationHelper\";\n\nconst usePagination = (getAllDataLogic, meta) => {\n    const [currentPerPage, setCurrentPerPage] = useState(getValidPerPage());\n    const [currentPage, setCurrentPageState] = useState(getValidPageNumber());\n\n    useEffect(() => {\n        getAllDataLogic();\n    }, [currentPage, currentPerPage]);\n\n    useEffect(() => {\n        setCurrentPerPage(meta.perPage);\n        setCurrentPageState(meta.currentPage);\n    }, [meta]);\n\n    const handlePageChange = (page) => {\n        setCurrentPageState(page);\n        updatePaginationParams(page, currentPerPage);\n    };\n\n    const handlePerPageChange = (perPage) => {\n        setCurrentPerPage(perPage);\n        updatePaginationParams(currentPage, perPage);\n        setCurrentPerPage(perPage);\n    };\n\n    return {\n        currentPerPage,\n        currentPage,\n        handlePageChange,\n        handlePerPageChange,\n        setCurrentPageState\n    };\n};\n\nexport default usePagination;\n","import {pushSearchParam} from \"../helpers/searchHelper\";\n\nconst useSearch = (getAllDataLogic) => {\n    const handleSearch = (value) => {\n        pushSearchParam(value)\n        getAllDataLogic()\n    }\n\n    return {handleSearch}\n}\n\nexport default useSearch;"],"names":["_ref","buttons","title","columns","data","paginationObject","pagination","searchable","handleSearch","entriesPerPageOptions","searchValue","setSearchValue","useState","getSearchParam","_jsx","Fragment","children","Row","Col","sm","_jsxs","Card","CardHeader","className","CardTitle","tag","Label","for","Input","type","id","value","currentPerPage","onChange","e","handlePerPageChange","target","map","option","InputGroup","size","style","width","Search","onClick","event","placeholder","DataTable","bordered","noHeader","paginationComponent","paginationServer","sortIcon","ChevronDown","isLoading","handleDelete","_Fragment","Button","handleConfirmText","MySwal","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","then","result","isConfirmed","color","Trash","actions","useContactUsLogic","dispatch","useDispatch","selector","useSelector","state","contactUsReducer","all","allLoading","loading","meta","getContactUsTableLogic","params","arguments","length","undefined","getUniqueParams","setAllContactUsLoadingAction","axiosInstance","get","response","setAllContactUsAction","setAllContactUsMetaAction","finally","deleteContactUsLogic","deleteContactUsLoadingAction","delete","concat","props","sortable","name","minwidth","row","email","phone","message","cell","generateActions","DeleteDropDownItem","TableActions","tableLoading","deleteLoading","toastLoader","CustomTable","getColumns","handlePageChange","ContactUsContainer","useSearch","currentPage","setCurrentPageState","usePagination","ContactUsTable","Pagination","lazy","args","getValidPageNumber","page","Number","parseInt","isInteger","getValidPerPage","perPage","updatePaginationParams","updatedParams","URLSearchParams","window","location","search","set","toString","updateParams","parseRoute","bindings","routePath","key","Object","entries","replace","urlParams","uniqueParams","Set","forEach","add","uniqueParamsArray","Array","from","uniqueUrlParams","item","append","newUrl","pathname","history","pushState","path","goBack","back","pushSearchParam","useEffect","toastFactory","dismiss","getAllDataLogic","setCurrentPerPage"],"sourceRoot":""}