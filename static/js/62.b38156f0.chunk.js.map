{"version":3,"file":"static/js/62.b38156f0.chunk.js","mappings":"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","sources":["utility/formik/formikConfig.js","utility/formik/formikHelper.js","utility/validation/customSchema.js","utility/helpers/validationRuleHelper.js","modules/auth/validation/LoginSchema.js","modules/auth/services/loginService.js","modules/auth/containers/LoginContainer.jsx"],"sourcesContent":["import PropTypes from \"prop-types\";\n\nconst FormikConfig = ({initialValues, validationSchema, onSubmit, overrideConfig}) => {\n    return {\n        initialValues,\n        validateOnBlur: true,\n        validateOnChange: false,\n        validateOnMount: false,\n        enableReinitialize: true,\n        validationSchema,\n        onSubmit,\n        ...overrideConfig\n    }\n}\n\nFormikConfig.propTypes = {\n    initialValues: PropTypes.object,\n    validationSchema: PropTypes.object.isRequired,\n    onSubmit: PropTypes.func.isRequired\n}\n\nexport default FormikConfig","import {useFormik} from \"formik\";\nimport FormikConfig from \"./formikConfig\";\nimport PropTypes from \"prop-types\";\nimport {HttpResponse} from \"../../constants/api\";\nimport toastFactory from \"../factories/toastFactory\";\nimport {isObjEmpty} from \"../Utils\";\n\nexport const formikInstance = (props) => {\n    const formikConfig = FormikConfig(props)\n\n    return useFormik(formikConfig)\n}\n\nexport const formikErrorHandler = (response, formikObject) => {\n    const {initialValues, setErrors} = formikObject;\n\n    const errorKeys = Object.keys(initialValues);\n\n    if (response.code === HttpResponse.VALIDATION_ERRORS) {\n        const tmpErrors = {}\n\n        errorKeys.forEach((errorKey) => {\n            if (response.data[errorKey] !== undefined) {\n                tmpErrors[errorKey] = response.data[errorKey]\n            }\n        })\n\n        if (!isObjEmpty(tmpErrors)) {\n            setErrors(tmpErrors)\n        }\n    }\n\n    const responseErrorKeys = Object.keys(response.data);\n\n    for (let i = 0; i < responseErrorKeys.length; i++) {\n        if (!errorKeys.includes(responseErrorKeys[i])) {\n            toastFactory.error(response.data[responseErrorKeys[i]])\n            break;\n        }\n    }\n}\n\nexport const buildFormikParams = (formik) => {\n    return {\n        setErrors: formik.setErrors,\n        initialValues: formik.initialValues,\n        setSubmitting: formik.setSubmitting\n    }\n}\n\nformikInstance.propTypes = {\n    initialValues: PropTypes.object,\n    validationSchema: PropTypes.object.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    overrideConfig: PropTypes.object\n}","const isFile = (value) => {\n    return (value instanceof File)\n}\n\nconst fileSchema = (value, createError) => {\n    if (!isFile(value)) {\n        return createError('field must be a valid file')\n    }\n\n    return true;\n}\n\nconst imageSchema = (value, createError) => {\n    console.log(value, value.size, value.type)\n    const type = value?.type?.split('/')[0] || null;\n\n    if (!isFile(value) || type !== 'image') {\n        return createError({message: 'field must be an image'})\n    }\n\n    return true;\n}\n\nconst customSchema = {\n    file: fileSchema,\n    image: imageSchema\n}\n\nexport default customSchema","import * as Yup from 'yup'\nimport customSchema from \"../validation/customSchema\";\n\nexport const replaceDefaultRules = (defaultRules, newRules) => {\n    if (newRules) {\n        Object.keys(newRules).forEach((key) => {\n            if (newRules[key]) {\n                delete defaultRules[key]\n            } else {\n                defaultRules[key] = newRules[key]\n            }\n        })\n    }\n\n\n    return Object.values(defaultRules)?.filter((item) => !!item)\n}\n\nexport const emailRules = (newRules) => {\n    const defaultRules = {\n        required: 'required',\n        email: 'email',\n        trim: 'trim'\n    }\n\n    return replaceDefaultRules(defaultRules, newRules)\n}\n\nexport const stringRules = (newRules) => {\n    const defaultRules = {\n        required: 'required',\n        max: 'max:255',\n        trim: 'trim'\n    }\n\n    return replaceDefaultRules(defaultRules, newRules)\n}\n\nexport const imageRules = (newRules) => {\n    const defaultRules = {\n        required: 'required',\n        image: 'image'\n    }\n\n    return replaceDefaultRules(defaultRules, newRules)\n}\n\nexport const passwordRules = (newRules) => {\n    const defaultRules = {\n        required: 'required',\n        min: 'min:8',\n        trim: 'trim'\n    }\n\n    return replaceDefaultRules(defaultRules, newRules)\n}\n\nconst generateSchema = (allRulesObject) => {\n    let schema = Yup.object().shape({});\n\n    Object.entries(allRulesObject).forEach(([fieldName, fieldRules]) => {\n        if (fieldRules) {\n            let fieldSchema = Yup.string();\n\n            fieldRules.forEach((rule) => {\n                const [ruleName, ...params] = rule.split(':');\n\n                if (customSchema[ruleName] !== undefined) {\n                    fieldSchema = fieldSchema.test(\n                        ruleName,\n                        'error',\n                        (value, {createError}) => customSchema[ruleName](value, createError, ...params));\n                } else {\n                    fieldSchema = fieldSchema[ruleName](...params);\n                }\n            });\n\n            schema = schema.shape({[fieldName]: fieldSchema});\n        }\n    });\n\n    return schema;\n};\n\n\nexport const yupInstance = Yup;\nexport default generateSchema","import generateSchema, {emailRules, passwordRules} from \"../../../utility/helpers/validationRuleHelper\"\n\nconst LoginSchema = () => {\n    return generateSchema({\n        email: emailRules({required: null}),\n        password: passwordRules({min: null})\n    })\n}\n\nexport default LoginSchema\n\n// export type nn= z.infer<ReaturnValue<typeof","import {useAuthLogic} from \"../hooks/useAuthLogic\";\n\nconst LoginService = () => {\n    const {dispatchLogin, loginSelector} = useAuthLogic()\n    const {userInfo, isLoading, code} = loginSelector;\n\n    const handleLogin = async (payload) => {\n        await dispatchLogin(payload)\n    }\n\n    return {\n        handleLogin,\n        userInfo,\n        isLoading,\n        code\n    }\n}\n\nexport default LoginService\n","import {lazy, useEffect} from \"react\"\nimport {formikInstance} from \"../../../utility/formik/formikHelper\";\nimport loginSchema from \"../validation/LoginSchema\";\nimport LoginService from \"../services/loginService\";\nimport {HttpResponse} from \"../../../constants/api\";\nimport {useNavigate} from \"react-router-dom\";\nimport {DEFAULT_ROUTE} from \"../../../constants/routes\";\nimport {isUserLoggedIn} from \"../utils/authHelper\";\nimport {resetStore} from \"../../../redux/store\";\n\nconst LoginView = lazy(() => import(\"../views/LoginView\"))\n\nconst LoginContainer = () => {\n    const navigate = useNavigate()\n\n    useEffect(() => {\n        if (isUserLoggedIn()) {\n            navigate(DEFAULT_ROUTE);\n        } else {\n            resetStore()\n        }\n    }, [navigate]);\n\n    const {handleLogin, isLoading, code} = LoginService();\n    const formik = formikInstance({\n        initialValues: {email: '', password: ''},\n        validationSchema: loginSchema(),\n        onSubmit: (values) => handleLogin(values)\n    });\n\n    useEffect(() => {\n        if (code === HttpResponse.OK) {\n            navigate(DEFAULT_ROUTE, {replace: true})\n        }\n    }, [code]);\n\n    return <LoginView\n        handleSubmit={formik.handleSubmit}\n        formikValues={formik.values}\n        handleChange={formik.handleChange}\n        formikErrors={formik.errors}\n        isSubmitting={isLoading}\n    />\n}\n\nexport default LoginContainer"],"names":["FormikConfig","_ref","initialValues","validationSchema","onSubmit","overrideConfig","validateOnBlur","validateOnChange","validateOnMount","enableReinitialize","propTypes","PropTypes","isRequired","formikInstance","props","formikConfig","useFormik","isFile","value","File","file","fileSchema","createError","image","imageSchema","_value$type","console","log","size","type","split","message","replaceDefaultRules","defaultRules","newRules","_Object$values","Object","keys","forEach","key","values","filter","item","passwordRules","required","min","trim","allRulesObject","schema","Yup","shape","entries","fieldName","fieldRules","fieldSchema","rule","ruleName","params","undefined","customSchema","test","_ref2","LoginSchema","generateSchema","email","password","LoginService","dispatchLogin","loginSelector","useAuthLogic","userInfo","isLoading","code","handleLogin","async","payload","LoginView","lazy","LoginContainer","navigate","useNavigate","useEffect","isUserLoggedIn","DEFAULT_ROUTE","resetStore","formik","loginSchema","HttpResponse","OK","replace","_jsx","handleSubmit","formikValues","handleChange","formikErrors","errors","isSubmitting"],"sourceRoot":""}