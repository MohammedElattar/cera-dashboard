{"version":3,"file":"static/js/615.231b3e9b.chunk.js","mappings":"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","sources":["modules/product/validation/index.js","hooks/useSelectMenuLogic.js","modules/product/containers/ProductFormContainer.jsx","modules/product/hooks/useProductLogic.js","utility/formik/formikConfig.js","utility/formik/formikHelper.js","utility/helpers/routeHelper.js","utility/helpers/selectHelper.js","utility/validation/customSchema.js","utility/helpers/validationRuleHelper.js"],"sourcesContent":["import generateSchema, {\n    arrayRules,\n    integerRules,\n    longTextRules,\n    stringRules\n} from \"../../../utility/helpers/validationRuleHelper\";\n\nconst productSchema = generateSchema({\n    name: stringRules(),\n    quantity: integerRules(),\n    price: integerRules(),\n    description: longTextRules(),\n    colors: arrayRules(),\n    sizes: arrayRules()\n})\n\nexport default productSchema;","import {useDispatch, useSelector} from \"react-redux\";\nimport axiosInstance from \"../api/axiosInstance\";\nimport {setColorsMenuAction, setColorsMenuLoading} from \"../redux/selectMenu\";\n\nconst useSelectMenuLogic = () => {\n    const dispatch = useDispatch();\n    const selector = useSelector((state) => state.selectMenuReducer),\n        colorsMenu = selector.colors.data;\n\n    const getColorsMenu = () => {\n        dispatch(setColorsMenuLoading(true));\n        axiosInstance.get('/api/select_menu/colors').then((response) => {\n            dispatch(setColorsMenuAction(response.data.data))\n        })\n            .finally(() => dispatch(setColorsMenuLoading(false)))\n    }\n\n    return {\n        colorsMenu,\n        getColorsMenu\n    }\n}\n\nexport default useSelectMenuLogic;","import {lazy, useEffect, useState} from \"react\";\nimport useProductLogic from \"../hooks/useProductLogic\";\nimport {useParams} from \"react-router-dom\";\nimport {buildFormikParams, formikInstance} from \"../../../utility/formik/formikHelper\";\nimport productSchema from \"../validation\";\nimport useSelectMenuLogic from \"../../../hooks/useSelectMenuLogic\";\nimport {getMenuValues} from \"../../../utility/helpers/selectHelper\";\n\nconst ProductForm = lazy(() => import('../views/ProductForm'))\nexport const emptyProductInitial = {\n    name: '',\n    quantity: 1,\n    price: 1,\n    description: '',\n    colors: [],\n    sizes: [],\n    image: ''\n}\n\nconst ProductFormContainer = () => {\n    const {getOneProductLogic, updateProductLogic, storeProductLogic, oneProduct} = useProductLogic()\n    const {getColorsMenu, colorsMenu} = useSelectMenuLogic()\n    const {id} = useParams();\n    const [image, setImage] = useState(null);\n    const inUpdate = id !== undefined;\n    const formik = formikInstance({\n        initialValues: !inUpdate ? emptyProductInitial : {\n            name: oneProduct.name,\n            quantity: oneProduct.quantity,\n            price: oneProduct.price,\n            colors: oneProduct.colors || [],\n            description: oneProduct.description || '',\n            sizes: oneProduct.sizes || [],\n            image: ''\n        },\n        validationSchema: productSchema,\n        onSubmit: (values) => {\n            values['colors'] = getMenuValues(values.colors)\n            console.log(values)\n\n            values['image'] = image;\n            const formData = new FormData();\n\n            for (const key in values) {\n                console.log('key is', key)\n                if (['colors', 'sizes'].includes(key)) {\n                    console.log('iam here')\n                    values[key].map((value, index) => {\n                        formData.append(`${key}[${index}]`, value)\n                    })\n                } else {\n                    if (values[key] !== null) {\n                        formData.append(key, values[key])\n                    }\n                 }\n            }\n\n            if (inUpdate) {\n               updateProductLogic(formData, id, buildFormikParams(formik))\n            } else {\n                storeProductLogic(formData, buildFormikParams(formik))\n            }\n        }});\n\n    useEffect(() => {\n        const fetchData = async function() {\n            await getColorsMenu()\n\n            if (inUpdate) {\n                await getOneProductLogic(id)\n            }\n        }\n\n        fetchData()\n    }, []);\n\n\n    console.log('formik', formik, colorsMenu)\n    const {\n        handleChange,\n        handleSubmit,\n        handleBlur,\n        values,\n        errors,\n        isValid,\n        isSubmitting,\n        setFieldValue,\n        resetForm\n    } = formik\n\n    return <ProductForm\n        inUpdate={inUpdate}\n        data={{colorsMenu}}\n        setImage={setImage}\n        formikObject={{handleBlur, handleChange, handleSubmit, values, errors, isSubmitting, isValid, setFieldValue, resetForm}}\n    />\n}\n\nexport default ProductFormContainer;","import {useDispatch, useSelector} from \"react-redux\";\nimport {useNavigate} from \"react-router-dom\";\nimport {getUniqueParams} from \"../../../utility/helpers/routeHelper\";\nimport {\n    setAllProductsLogic,\n    setAllProductsLoading,\n    setAllProductsMetaLogic, setOneProductLogic\n} from \"../redux\";\nimport axiosInstance from \"../../../api/axiosInstance\";\nimport productRoutes from \"../../product/constants/routes\";\nimport {formikErrorHandler} from \"../../../utility/formik/formikHelper\";\n\nconst useProductLogic = () => {\n    const dispatch = useDispatch()\n    const navigate = useNavigate()\n    const selector = useSelector(state => state.productReducer),\n        all = selector.all.data,\n        meta = selector.all.meta,\n        oneProduct = selector.show;\n\n    const getAllProductsLogic = (params = undefined) => {\n        params = params === undefined ? getUniqueParams() : params;\n        dispatch(setAllProductsLoading(true))\n\n        axiosInstance.get('/api/admin/products', {params}).then((response) => {\n            dispatch(setAllProductsLogic(response.data.data))\n            dispatch(setAllProductsMetaLogic(response.data.meta));\n        }).finally(() => dispatch(setAllProductsLoading(false)))\n    }\n\n    const getOneProductLogic = (id) => {\n        dispatch(setAllProductsLoading(true))\n\n        axiosInstance.get(`/api/admin/products/${id}`).then((response) => {\n            dispatch(setOneProductLogic(response.data.data));\n        }).finally(() => dispatch(setAllProductsLoading(false)))\n    }\n\n    const storeProductLogic = (values, formikObject) => {\n        const {setSubmitting} = formikObject;\n\n        setSubmitting(true)\n\n        axiosInstance.postForm('/api/admin/products', values)\n            .then(() => navigate(productRoutes.TABLE))\n            .catch((error) => formikErrorHandler(error.response.data, formikObject))\n            .finally(() => setSubmitting(false))\n    }\n\n    const updateProductLogic = (values, id, formikObject) => {\n        const {setSubmitting} = formikObject;\n\n        setSubmitting(true)\n\n        axiosInstance.postForm(`/api/admin/products/${id}`, values)\n            .then(() => navigate(productRoutes.TABLE))\n            .catch((error) => formikErrorHandler(error.response.data, formikObject))\n            .finally(() => setSubmitting(false))\n    }\n\n    const deleteProductLogic = (id) => {\n        axiosInstance.delete(`/api/admin/products/${id}`).then(() => getAllProductsLogic())\n    }\n\n    return {\n        all,\n        meta,\n        oneProduct,\n        getAllProductsLogic,\n        storeProductLogic,\n        updateProductLogic,\n        deleteProductLogic,\n        getOneProductLogic\n    }\n}\n\nexport default useProductLogic","import PropTypes from \"prop-types\";\n\nconst FormikConfig = ({initialValues, validationSchema, onSubmit, overrideConfig}) => {\n    return {\n        initialValues,\n        validateOnBlur: true,\n        validateOnChange: false,\n        validateOnMount: false,\n        enableReinitialize: true,\n        validationSchema,\n        onSubmit,\n        ...overrideConfig\n    }\n}\n\nFormikConfig.propTypes = {\n    initialValues: PropTypes.object,\n    validationSchema: PropTypes.object.isRequired,\n    onSubmit: PropTypes.func.isRequired\n}\n\nexport default FormikConfig","import {useFormik} from \"formik\";\nimport FormikConfig from \"./formikConfig\";\nimport PropTypes from \"prop-types\";\nimport {HttpResponse} from \"../../constants/api\";\nimport toastFactory from \"../factories/toastFactory\";\nimport {isObjEmpty} from \"../Utils\";\n\nexport const formikInstance = (props) => {\n    const formikConfig = FormikConfig(props)\n\n    return useFormik(formikConfig)\n}\n\nexport const formikErrorHandler = (response, formikObject) => {\n\n    if (response.code !== HttpResponse.VALIDATION_ERRORS) {\n        return;\n    }\n\n    console.log('iam here');\n\n    const {initialValues, setErrors} = formikObject;\n\n    const errorKeys = Object.keys(initialValues);\n\n    const tmpErrors = {}\n\n    errorKeys.forEach((errorKey) => {\n        if (response.data[errorKey] !== undefined) {\n            tmpErrors[errorKey] = response.data[errorKey]\n        }\n    })\n\n    if (!isObjEmpty(tmpErrors)) {\n        setErrors(tmpErrors)\n    }\n\n    const responseErrorKeys = Object.keys(response.data);\n\n    for (let i = 0; i < responseErrorKeys.length; i++) {\n        if (!errorKeys.includes(responseErrorKeys[i])) {\n            toastFactory.error(response.data[responseErrorKeys[i]])\n            break;\n        }\n    }\n}\n\nexport const buildFormikParams = (formik) => {\n    return {\n        setErrors: formik.setErrors,\n        initialValues: formik.initialValues,\n        setSubmitting: formik.setSubmitting\n    }\n}\n\n\nformikInstance.propTypes = {\n    initialValues: PropTypes.object,\n    validationSchema: PropTypes.object.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    overrideConfig: PropTypes.object\n}","export const parseRoute = (url = '', bindings = {}) => {\n    let routePath = url;\n    for (const [key, value] of Object.entries(bindings)) {\n        routePath = routePath.replace(`:${key}`, value);\n    }\n\n    return routePath;\n}\n\nexport function getUniqueParams() {\n    const urlParams = new URLSearchParams(window.location.search);\n\n    const uniqueParams = new Set();\n    \n    urlParams.forEach((value, key) => {\n        uniqueParams.add(key);\n    });\n    \n    const uniqueParamsArray = Array.from(uniqueParams);\n\n    const uniqueUrlParams = new URLSearchParams();\n\n    uniqueParamsArray.forEach((item) => uniqueUrlParams.append(item, urlParams.get(item)));\n\n    return uniqueUrlParams;\n}\n\nexport const updateParams = (params) => {\n    const newUrl = `${window.location.pathname}?${params}`;\n    window.history.pushState({ path: newUrl }, '', newUrl);\n}\n\nexport const goBack = () => {\n    history.back()\n}","export const castOption = (option, definitions = {id: 'id', newId: 'value', name: 'name', newName: 'label'}) => {\n    const tmpOption = {...option}\n\n    if (option[definitions.newId] === undefined && option[definitions.id] !== undefined) {\n        tmpOption[definitions.newId] = tmpOption[definitions.id]\n        delete tmpOption[definitions.id]\n    }\n\n    if (option[definitions.newName] === undefined && option[definitions.name] !== undefined) {\n        tmpOption[definitions.newName] = option[definitions.name]\n        delete tmpOption[definitions.name]\n    }\n\n    return tmpOption;\n}\n\nexport const castOptions = (options, definition = {id: 'id', newId: 'value', name: 'name', newName: 'label'}) => {\n    return options.map((option) => castOption(option, definition))\n}\n\nexport const getMenuValues = (options) => {\n    if (Array.isArray(options)) {\n        return options.map((option) => (option.value === undefined ? option.id : option.value));\n    } else {\n        return options.value === undefined ? options.value : options.id;\n    }\n}","const isFile = (value) => {\n    return (value instanceof File)\n}\n\nconst fileSchema = (value, createError) => {\n    if (!isFile(value)) {\n        return createError('field must be a valid file')\n    }\n\n    return true;\n}\n\nconst imageSchema = (value, createError) => {\n    console.log(value, value.size, value.type)\n    const type = value?.type?.split('/')[0] || null;\n\n    if (!isFile(value) || type !== 'image') {\n        return createError({message: 'field must be an image'})\n    }\n\n    return true;\n}\n\nconst customSchema = {\n    file: fileSchema,\n    image: imageSchema\n}\n\nexport default customSchema","import * as Yup from 'yup'\nimport customSchema from \"../validation/customSchema\";\n\nexport const replaceDefaultRules = (defaultRules, newRules) => {\n    if (newRules) {\n        Object.keys(newRules).forEach((key) => {\n            if (newRules[key]) {\n                delete defaultRules[key]\n            } else {\n                defaultRules[key] = newRules[key]\n            }\n        })\n    }\n\n\n    return Object.values(defaultRules)?.filter((item) => !!item)\n}\n\nexport const emailRules = (newRules) => {\n    const defaultRules = {\n        string: 'string',\n        required: 'required',\n        email: 'email',\n        trim: 'trim'\n    }\n\n    return replaceDefaultRules(defaultRules, newRules)\n}\n\nexport const stringRules = (newRules) => {\n    const defaultRules = {\n        string: 'string',\n        required: 'required',\n        max: 'max:255',\n        trim: 'trim'\n    }\n\n    return replaceDefaultRules(defaultRules, newRules)\n}\n\nexport const longTextRules = (newRules) => {\n    return stringRules({...{max: null}, ...newRules})\n}\n\nexport const imageRules = (newRules) => {\n    const defaultRules = {\n        required: 'required',\n        image: 'image'\n    }\n\n    return replaceDefaultRules(defaultRules, newRules)\n}\n\nexport const passwordRules = (newRules) => {\n    const defaultRules = {\n        string: 'string',\n        required: 'required',\n        min: 'min:8',\n        trim: 'trim'\n    }\n\n    return replaceDefaultRules(defaultRules, newRules)\n}\n\nexport const integerRules = (newRules) => {\n    const defaultRules = {\n        number: 'number',\n        required: 'required',\n        min: 'min:1'\n    }\n\n    return replaceDefaultRules(defaultRules, newRules)\n}\n\nexport const arrayRules = (newRules) => {\n    const defaultRules = {\n        array: 'array',\n        required: 'required'\n    }\n\n    return replaceDefaultRules(defaultRules, newRules)\n}\n\nconst generateSchema = (allRulesObject) => {\n    let schema = Yup.object().shape({});\n\n    Object.entries(allRulesObject).forEach(([fieldName, fieldRules]) => {\n        if (fieldRules) {\n            let fieldSchema = Yup\n\n            fieldRules.forEach((rule) => {\n                const [ruleName, ...params] = rule.split(':');\n\n                if (customSchema[ruleName] !== undefined) {\n                    fieldSchema = fieldSchema.test(\n                        ruleName,\n                        'error',\n                        (value, {createError}) => customSchema[ruleName](value, createError, ...params));\n                } else {\n                    fieldSchema = fieldSchema[ruleName](...params);\n                }\n            });\n\n            schema = schema.shape({[fieldName]: fieldSchema});\n        }\n    });\n\n    return schema;\n};\n\n\nexport const yupInstance = Yup;\nexport default generateSchema"],"names":["generateSchema","name","stringRules","quantity","integerRules","price","description","longTextRules","colors","arrayRules","sizes","useSelectMenuLogic","dispatch","useDispatch","colorsMenu","useSelector","state","selectMenuReducer","data","getColorsMenu","setColorsMenuLoading","axiosInstance","get","then","response","setColorsMenuAction","finally","ProductForm","lazy","emptyProductInitial","image","ProductFormContainer","getOneProductLogic","updateProductLogic","storeProductLogic","oneProduct","useProductLogic","id","useParams","setImage","useState","inUpdate","undefined","formik","formikInstance","initialValues","validationSchema","productSchema","onSubmit","values","getMenuValues","console","log","formData","FormData","key","includes","map","value","index","append","concat","buildFormikParams","useEffect","async","fetchData","handleChange","handleSubmit","handleBlur","errors","isValid","isSubmitting","setFieldValue","resetForm","_jsx","formikObject","navigate","useNavigate","selector","productReducer","all","meta","show","getAllProductsLogic","params","arguments","length","getUniqueParams","setAllProductsLoading","setAllProductsLogic","setAllProductsMetaLogic","setSubmitting","postForm","productRoutes","TABLE","catch","error","formikErrorHandler","deleteProductLogic","delete","setOneProductLogic","FormikConfig","_ref","overrideConfig","validateOnBlur","validateOnChange","validateOnMount","enableReinitialize","propTypes","PropTypes","isRequired","props","formikConfig","useFormik","code","HttpResponse","VALIDATION_ERRORS","setErrors","errorKeys","Object","keys","tmpErrors","forEach","errorKey","isObjEmpty","responseErrorKeys","i","toastFactory","parseRoute","bindings","routePath","entries","replace","urlParams","URLSearchParams","window","location","search","uniqueParams","Set","add","uniqueParamsArray","Array","from","uniqueUrlParams","item","updateParams","newUrl","pathname","history","pushState","path","goBack","back","castOptions","options","definition","newId","newName","option","definitions","tmpOption","castOption","isArray","isFile","File","file","fileSchema","createError","imageSchema","_value$type","size","type","split","message","replaceDefaultRules","defaultRules","newRules","_Object$values","filter","emailRules","string","required","email","trim","max","passwordRules","min","number","array","allRulesObject","schema","Yup","shape","fieldName","fieldRules","fieldSchema","rule","ruleName","customSchema","test","_ref2"],"sourceRoot":""}