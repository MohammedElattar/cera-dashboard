{"version":3,"file":"static/js/440.54e23d68.chunk.js","mappings":"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","sources":["components/form/CustomInput.jsx","components/form/ErrorBox.jsx","components/form/SubmitForm.jsx","components/form/elements/numberInput/IntegerNumberInput.jsx","components/form/elements/numberInput/DecimalNumberInput.jsx","components/form/elements/TextAreaComponent.jsx","components/form/elements/select/CustomSelectComponent.jsx","components/form/elements/select/MultiSelectComponent.jsx","@core/components/repeater/index.js","modules/product/views/ProductForm.jsx","utility/helpers/toastHelper.js"],"sourcesContent":["import { Input} from \"reactstrap\"\nimport ErrorBox from \"./ErrorBox\";\n\nconst CustomInput = (props) => {\n    return <>\n        <Input {...props} />\n        <ErrorBox message={props.error}/>\n    </>\n}\n\nexport default CustomInput","import PropTypes from \"prop-types\";\nimport {FormFeedback} from \"reactstrap\";\n\nconst ErrorBox = ({message}) => {\n    return message && <span className={'alert alert-danger'}>{message}</span>\n}\n\nErrorBox.propTypes = {\n    message: PropTypes.string\n}\n\nexport default ErrorBox","import {Button, Col, Spinner} from \"reactstrap\";\nimport {goBack} from \"../../utility/helpers/routeHelper\";\n\nconst SubmitForm = ({isSubmitting}) => {\n    // const {shouldSubmit} = useFormikLogic(isSubmitting, errors)\n\n    return <Col xs={12} className='text-center mt-2 pt-50'>\n        <div className='d-flex'>\n            <Button type='submit' className='me-1' color='primary' disabled={isSubmitting}>\n                {isSubmitting && (<><Spinner size='sm' type='grow' /><span className='ms-50'>Loading...</span></>)}\n                {!isSubmitting && 'Submit'}\n            </Button>\n            <Button outline color='secondary' type='button' onClick={goBack}>\n                Go back\n            </Button>\n        </div>\n    </Col>\n}\n\nexport default SubmitForm;","import {Minus, Plus} from \"react-feather\";\nimport InputNumber from \"rc-input-number\";\nimport '../../../../@core/scss/react/libs/input-number/input-number.scss'\nimport ErrorBox from \"../../ErrorBox\";\n\nconst IntegerNumberInput = (props) => {\n    return <><InputNumber\n        changeOnBlur={true}\n        changeOnWheel={false}\n        min={1}\n        upHandler={<Plus />}\n        downHandler={<Minus />}\n        step={1}\n        {...props}\n    />\n        <ErrorBox message={props?.error || ''}/>\n        </>\n}\n\nexport default IntegerNumberInput;","import IntegerNumberInput from \"./IntegerNumberInput\";\nimport ErrorBox from \"../../ErrorBox\";\n\nconst DecimalNumberInput = (props) => {\n    return (\n        <>\n            <IntegerNumberInput step={0.1} {...props}/>\n        </>\n    )\n}\n\nexport default DecimalNumberInput;","import CustomInput from \"../CustomInput\";\n\nconst TextAreaComponent = (props) => {\n    return <CustomInput type='textarea' {...props}/>\n}\n\nexport default TextAreaComponent;","import Select from \"react-select\";\nimport {castOptions} from \"../../../../utility/helpers/selectHelper\";\nimport {selectThemeColors} from \"../../../../utility/Utils\";\nimport {useEffect, useState} from \"react\";\n\nconst CustomSelectComponent = (props) => {\n    let {options, value} = props;\n    const [values, setValues] = useState([])\n\n    useEffect(() => {\n        setValues(value)\n    }, [value]);\n\n    if (options !== undefined) {\n        options = castOptions(options);\n    }\n\n    if (value !== undefined) {\n        value = castOptions(value)\n    }\n\n    const handleChange = (selectedValues) => {\n        if (selectedValues === null) {\n            return null;\n        }\n\n        if (Array.isArray(selectedValues)) {\n            setValues(selectedValues);\n        } else {\n            setValues(selectedValues);\n        }\n\n        return selectedValues\n    }\n\n    console.log('default value', value)\n\n    return <Select\n        style={{zIndex: 2}}\n        className='react-select'\n        classNamePrefix='select'\n        isClearable={true}\n        {...props}\n        onChange={\n        props.onChange === undefined ? handleChange : (selected) => props.onChange(handleChange(selected))\n    }\n        theme={selectThemeColors}\n        options={options}\n        value={values}\n    />\n}\n\nexport default CustomSelectComponent;","import CustomSelectComponent from \"./CustomSelectComponent\";\n\nconst MultiSelectComponent = (props) => {\n    return <CustomSelectComponent\n        isMulti={true}\n        closeMenuOnSelect={false}\n        {...props}\n    />\n}\n\nexport default MultiSelectComponent;","// ** Third Party Components\nimport PropTypes from \"prop-types\"\n\nconst Repeater = (props) => {\n  // ** Props\n  const { count, tag, children, ...rest } = props\n\n  // ** Custom Tag\n  const Tag = tag\n\n  // ** Default Items\n  const items = []\n\n  // ** Loop passed count times and push it in items Array\n  for (let i = 0; i < count; i++) {\n    items.push(children(i))\n  }\n\n  return <Tag {...rest}>{items}</Tag>\n}\n\n// ** PropTypes\nRepeater.propTypes = {\n  count: PropTypes.number.isRequired,\n  tag: PropTypes.string.isRequired\n}\n\n// ** Default Props\nRepeater.defaultProps = {\n  tag: \"div\"\n}\n\nexport default Repeater\n","import {useSelector} from \"react-redux\";\nimport {toastLoader} from \"../../../utility/helpers/toastHelper\";\nimport {Button, Card, CardBody, CardHeader, CardTitle, Col, Form, Input, Label, Row} from \"reactstrap\";\nimport CustomTextInput from \"../../../components/form/CustomInput\";\nimport SubmitForm from \"../../../components/form/SubmitForm\";\nimport IntegerNumberInput from \"../../../components/form/elements/numberInput/IntegerNumberInput\";\nimport DecimalNumberInput from \"../../../components/form/elements/numberInput/DecimalNumberInput\";\nimport TextAreaComponent from \"../../../components/form/elements/TextAreaComponent\";\nimport MultiSelectComponent from \"../../../components/form/elements/select/MultiSelectComponent\";\nimport Repeater from \"../../../@core/components/repeater\";\nimport {useEffect, useState} from \"react\";\nimport {Plus, X} from \"react-feather\";\nimport SlideDown from \"react-slidedown\";\nimport ErrorBox from \"../../../components/form/ErrorBox\";\n\nconst ProductForm = ({inUpdate, formikObject, data, setImage}) => {\n    const {handleSubmit, values, errors, handleBlur, handleChange, isSubmitting, setFieldValue} = formikObject;\n    const isFetching = useSelector(state => state.colorsReducer.show.loading);\n\n    const [count, setCount] = useState(values?.sizes?.length || 1)\n\n    const increaseCount = () => {\n        setCount(count + 1)\n    }\n\n    const deleteForm = e => {\n        e.preventDefault()\n        const slideDownWrapper = e.target.closest('.react-slidedown'),\n            form = e.target.closest('form')\n        if (slideDownWrapper) {\n            slideDownWrapper.remove()\n        } else {\n            form.remove()\n        }\n    }\n\n    useEffect(() => {\n        const tmpCount = values.sizes.length;\n\n        if (tmpCount) {\n            setCount(tmpCount)\n        }\n    }, [values.sizes]);\n    toastLoader(isFetching)\n\n    return (\n        <Card>\n            <CardHeader>\n                <CardTitle tag='h4'>{inUpdate ? 'Update' : 'Add'} Product</CardTitle>\n            </CardHeader>\n            <CardBody>\n                <Form onSubmit={handleSubmit}>\n                    <Row>\n                        <Col sm='12' className='mb-1'>\n                            <Label className='form-label' for='name'>\n                                Color Name\n                            </Label>\n                            <CustomTextInput\n                                onBlur={handleBlur}\n                                onChange={handleChange}\n                                type='text'\n                                name='name'\n                                id='name'\n                                value={values.name}\n                                invalid={errors.name && true}\n                                error={errors.name}\n                            />\n                        </Col>\n                        <Col sm='12' className='mb-1'>\n                            <Label className='form-label' for='quantity'>\n                                Quantity\n                            </Label>\n                            <IntegerNumberInput\n                                onBlur={handleBlur}\n                                value={values.quantity}\n                                id={'quantity'}\n                                error={errors.quantity}\n                                onChange={(value) => setFieldValue('quantity', value)}\n                            />\n                        </Col>\n                        <Col sm='12' className='mb-1'>\n                            <Label className='form-label' for='price'>\n                                Price\n                            </Label>\n                            <DecimalNumberInput\n                                onBlur={handleBlur}\n                                value={values.price}\n                                defaultValue={values.price}\n                                id={'price'}\n                                error={errors.price}\n                                onChange={(value) => setFieldValue('price', value)}\n                            />\n                        </Col>\n                        <Col sm='12' className='mb-1'>\n                            <Label className='form-label' for='description'>\n                                Description\n                            </Label>\n                            <TextAreaComponent\n                                onBlur={handleBlur}\n                                onChange={handleChange}\n                                name='description'\n                                id='description'\n                                value={values.description}\n                                invalid={errors.description && true}\n                                error={errors.description}\n                            />\n                        </Col>\n                        <Col sm='12' className='mb-1'>\n                            <Label className='form-label' for='image'>\n                                Image file\n                            </Label>\n                            <Input\n                                type='file'\n                                id='image'\n                                name='image'\n                                onChange={e => setImage(e.target.files[0] || null)}\n                            />\n                            <ErrorBox message={errors.image}/>\n                        </Col>\n                        <Col sm='12' className='mb-1'>\n                            <Label className='form-label' for='colors'>\n                                Colors\n                            </Label>\n                            <MultiSelectComponent\n                                options={data.colorsMenu}\n                                value={values.colors}\n                                id='colors'\n                                onChange={(selected) => setFieldValue('colors', selected)}\n                            />\n                        </Col>\n                        <Col sm='12' className='mb-1'>\n                            <Label className='form-label' for='colors'>\n                                Sizes\n                            </Label>\n                            <Repeater count={count}>\n                                {i => {\n                                    const Tag = i === 0 ? 'div' : SlideDown\n                                    return (\n                                        <Tag key={i}>\n                                            <Form>\n                                                <Row className='justify-content-between align-items-center'>\n                                                    <Col md={4} className='mb-md-0 mb-1'>\n                                                        <IntegerNumberInput\n                                                            value={values.sizes[i]}\n                                                            defaultValue={values.sizes[i]}\n                                                            onChange={(value) => {\n                                                                const sizes = [...values.sizes]\n                                                                sizes[i] = value;\n                                                                setFieldValue('sizes', sizes);\n                                                            }}\n                                                        />\n                                                    </Col>\n                                                    <Col md={2}>\n                                                        <Button color='danger' className='text-nowrap px-1' onClick={deleteForm} outline>\n                                                            <X size={14} className='me-50' />\n                                                            <span>Delete</span>\n                                                        </Button>\n                                                    </Col>\n                                                    <Col sm={12}>\n                                                        <hr />\n                                                    </Col>\n                                                </Row>\n                                            </Form>\n                                        </Tag>\n                                    )\n                                }}\n                            </Repeater>\n                            <Button className='btn-icon' color='primary' onClick={increaseCount}>\n                                <Plus size={14} />\n                                <span className='align-middle ms-25'>Add New</span>\n                            </Button>\n                        </Col>\n                        <SubmitForm isSubmitting={isSubmitting} errors={errors}/>\n                    </Row>\n                </Form>\n            </CardBody>\n        </Card>\n    )\n}\n\nexport default ProductForm;","import {useEffect} from \"react\";\nimport toastFactory from \"../factories/toastFactory\";\n\nexport const toastLoader = (isLoading = false) => {\n    useEffect(() => {\n        if (isLoading) {\n            toastFactory.dismiss()\n            toastFactory.loading('Loading')\n        } else {\n            toastFactory.dismiss()\n        }\n    }, [isLoading])\n}"],"names":["props","_jsxs","_Fragment","children","_jsx","Input","ErrorBox","message","error","_ref","className","isSubmitting","Col","xs","Button","type","color","disabled","Spinner","size","outline","onClick","goBack","InputNumber","changeOnBlur","changeOnWheel","min","upHandler","Plus","downHandler","Minus","step","IntegerNumberInput","CustomInput","options","value","values","setValues","useState","useEffect","undefined","castOptions","handleChange","selectedValues","Array","isArray","console","log","Select","style","zIndex","classNamePrefix","isClearable","onChange","selected","theme","selectThemeColors","CustomSelectComponent","isMulti","closeMenuOnSelect","Repeater","count","tag","rest","Tag","items","i","push","defaultProps","_values$sizes","inUpdate","formikObject","data","setImage","handleSubmit","errors","handleBlur","setFieldValue","isFetching","useSelector","state","colorsReducer","show","loading","setCount","sizes","length","deleteForm","e","preventDefault","slideDownWrapper","target","closest","form","remove","tmpCount","toastLoader","Card","CardHeader","CardTitle","CardBody","Form","onSubmit","Row","sm","Label","for","CustomTextInput","onBlur","name","id","invalid","quantity","DecimalNumberInput","price","defaultValue","TextAreaComponent","description","files","image","MultiSelectComponent","colorsMenu","colors","SlideDown","md","X","increaseCount","SubmitForm","isLoading","arguments","toastFactory","dismiss"],"sourceRoot":""}